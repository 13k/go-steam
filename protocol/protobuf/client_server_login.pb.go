// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_clientserver_login.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package protobuf is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package protobuf to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CMsgClientHeartBeat struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClientHeartBeat) Reset()                    { *m = CMsgClientHeartBeat{} }
func (m *CMsgClientHeartBeat) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientHeartBeat) ProtoMessage()               {}
func (*CMsgClientHeartBeat) Descriptor() ([]byte, []int) { return client_server_login_fileDescriptor0, []int{0} }

type CMsgClientLogon struct {
	ProtocolVersion                   *uint32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	ObfustucatedPrivateIp             *uint32 `protobuf:"varint,2,opt,name=obfustucated_private_ip,json=obfustucatedPrivateIp" json:"obfustucated_private_ip,omitempty"`
	CellId                            *uint32 `protobuf:"varint,3,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	LastSessionId                     *uint32 `protobuf:"varint,4,opt,name=last_session_id,json=lastSessionId" json:"last_session_id,omitempty"`
	ClientPackageVersion              *uint32 `protobuf:"varint,5,opt,name=client_package_version,json=clientPackageVersion" json:"client_package_version,omitempty"`
	ClientLanguage                    *string `protobuf:"bytes,6,opt,name=client_language,json=clientLanguage" json:"client_language,omitempty"`
	ClientOsType                      *uint32 `protobuf:"varint,7,opt,name=client_os_type,json=clientOsType" json:"client_os_type,omitempty"`
	ShouldRememberPassword            *bool   `protobuf:"varint,8,opt,name=should_remember_password,json=shouldRememberPassword,def=0" json:"should_remember_password,omitempty"`
	WineVersion                       *string `protobuf:"bytes,9,opt,name=wine_version,json=wineVersion" json:"wine_version,omitempty"`
	PingMsFromCellSearch              *uint32 `protobuf:"varint,10,opt,name=ping_ms_from_cell_search,json=pingMsFromCellSearch" json:"ping_ms_from_cell_search,omitempty"`
	PublicIp                          *uint32 `protobuf:"varint,20,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	QosLevel                          *uint32 `protobuf:"varint,21,opt,name=qos_level,json=qosLevel" json:"qos_level,omitempty"`
	ClientSuppliedSteamId             *uint64 `protobuf:"fixed64,22,opt,name=client_supplied_steam_id,json=clientSuppliedSteamId" json:"client_supplied_steam_id,omitempty"`
	MachineId                         []byte  `protobuf:"bytes,30,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	LauncherType                      *uint32 `protobuf:"varint,31,opt,name=launcher_type,json=launcherType,def=0" json:"launcher_type,omitempty"`
	UiMode                            *uint32 `protobuf:"varint,32,opt,name=ui_mode,json=uiMode,def=0" json:"ui_mode,omitempty"`
	Steam2AuthTicket                  []byte  `protobuf:"bytes,41,opt,name=steam2_auth_ticket,json=steam2AuthTicket" json:"steam2_auth_ticket,omitempty"`
	EmailAddress                      *string `protobuf:"bytes,42,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	Rtime32AccountCreation            *uint32 `protobuf:"fixed32,43,opt,name=rtime32_account_creation,json=rtime32AccountCreation" json:"rtime32_account_creation,omitempty"`
	AccountName                       *string `protobuf:"bytes,50,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	Password                          *string `protobuf:"bytes,51,opt,name=password" json:"password,omitempty"`
	GameServerToken                   *string `protobuf:"bytes,52,opt,name=game_server_token,json=gameServerToken" json:"game_server_token,omitempty"`
	LoginKey                          *string `protobuf:"bytes,60,opt,name=login_key,json=loginKey" json:"login_key,omitempty"`
	WasConvertedDeprecatedMsg         *bool   `protobuf:"varint,70,opt,name=was_converted_deprecated_msg,json=wasConvertedDeprecatedMsg,def=0" json:"was_converted_deprecated_msg,omitempty"`
	AnonUserTargetAccountName         *string `protobuf:"bytes,80,opt,name=anon_user_target_account_name,json=anonUserTargetAccountName" json:"anon_user_target_account_name,omitempty"`
	ResolvedUserSteamId               *uint64 `protobuf:"fixed64,81,opt,name=resolved_user_steam_id,json=resolvedUserSteamId" json:"resolved_user_steam_id,omitempty"`
	EresultSentryfile                 *int32  `protobuf:"varint,82,opt,name=eresult_sentryfile,json=eresultSentryfile" json:"eresult_sentryfile,omitempty"`
	ShaSentryfile                     []byte  `protobuf:"bytes,83,opt,name=sha_sentryfile,json=shaSentryfile" json:"sha_sentryfile,omitempty"`
	AuthCode                          *string `protobuf:"bytes,84,opt,name=auth_code,json=authCode" json:"auth_code,omitempty"`
	OtpType                           *int32  `protobuf:"varint,85,opt,name=otp_type,json=otpType" json:"otp_type,omitempty"`
	OtpValue                          *uint32 `protobuf:"varint,86,opt,name=otp_value,json=otpValue" json:"otp_value,omitempty"`
	OtpIdentifier                     *string `protobuf:"bytes,87,opt,name=otp_identifier,json=otpIdentifier" json:"otp_identifier,omitempty"`
	Steam2TicketRequest               *bool   `protobuf:"varint,88,opt,name=steam2_ticket_request,json=steam2TicketRequest" json:"steam2_ticket_request,omitempty"`
	SonyPsnTicket                     []byte  `protobuf:"bytes,90,opt,name=sony_psn_ticket,json=sonyPsnTicket" json:"sony_psn_ticket,omitempty"`
	SonyPsnServiceId                  *string `protobuf:"bytes,91,opt,name=sony_psn_service_id,json=sonyPsnServiceId" json:"sony_psn_service_id,omitempty"`
	CreateNewPsnLinkedAccountIfNeeded *bool   `protobuf:"varint,92,opt,name=create_new_psn_linked_account_if_needed,json=createNewPsnLinkedAccountIfNeeded,def=0" json:"create_new_psn_linked_account_if_needed,omitempty"`
	SonyPsnName                       *string `protobuf:"bytes,93,opt,name=sony_psn_name,json=sonyPsnName" json:"sony_psn_name,omitempty"`
	GameServerAppId                   *int32  `protobuf:"varint,94,opt,name=game_server_app_id,json=gameServerAppId" json:"game_server_app_id,omitempty"`
	SteamguardDontRememberComputer    *bool   `protobuf:"varint,95,opt,name=steamguard_dont_remember_computer,json=steamguardDontRememberComputer" json:"steamguard_dont_remember_computer,omitempty"`
	MachineName                       *string `protobuf:"bytes,96,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	MachineNameUserchosen             *string `protobuf:"bytes,97,opt,name=machine_name_userchosen,json=machineNameUserchosen" json:"machine_name_userchosen,omitempty"`
	CountryOverride                   *string `protobuf:"bytes,98,opt,name=country_override,json=countryOverride" json:"country_override,omitempty"`
	IsSteamBox                        *bool   `protobuf:"varint,99,opt,name=is_steam_box,json=isSteamBox" json:"is_steam_box,omitempty"`
	ClientInstanceId                  *uint64 `protobuf:"varint,100,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
	TwoFactorCode                     *string `protobuf:"bytes,101,opt,name=two_factor_code,json=twoFactorCode" json:"two_factor_code,omitempty"`
	SupportsRateLimitResponse         *bool   `protobuf:"varint,102,opt,name=supports_rate_limit_response,json=supportsRateLimitResponse" json:"supports_rate_limit_response,omitempty"`
	WebLogonNonce                     *string `protobuf:"bytes,103,opt,name=web_logon_nonce,json=webLogonNonce" json:"web_logon_nonce,omitempty"`
	XXX_unrecognized                  []byte  `json:"-"`
}

func (m *CMsgClientLogon) Reset()                    { *m = CMsgClientLogon{} }
func (m *CMsgClientLogon) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientLogon) ProtoMessage()               {}
func (*CMsgClientLogon) Descriptor() ([]byte, []int) { return client_server_login_fileDescriptor0, []int{1} }

const Default_CMsgClientLogon_ShouldRememberPassword bool = false
const Default_CMsgClientLogon_LauncherType uint32 = 0
const Default_CMsgClientLogon_UiMode uint32 = 0
const Default_CMsgClientLogon_WasConvertedDeprecatedMsg bool = false
const Default_CMsgClientLogon_CreateNewPsnLinkedAccountIfNeeded bool = false

func (m *CMsgClientLogon) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

func (m *CMsgClientLogon) GetObfustucatedPrivateIp() uint32 {
	if m != nil && m.ObfustucatedPrivateIp != nil {
		return *m.ObfustucatedPrivateIp
	}
	return 0
}

func (m *CMsgClientLogon) GetCellId() uint32 {
	if m != nil && m.CellId != nil {
		return *m.CellId
	}
	return 0
}

func (m *CMsgClientLogon) GetLastSessionId() uint32 {
	if m != nil && m.LastSessionId != nil {
		return *m.LastSessionId
	}
	return 0
}

func (m *CMsgClientLogon) GetClientPackageVersion() uint32 {
	if m != nil && m.ClientPackageVersion != nil {
		return *m.ClientPackageVersion
	}
	return 0
}

func (m *CMsgClientLogon) GetClientLanguage() string {
	if m != nil && m.ClientLanguage != nil {
		return *m.ClientLanguage
	}
	return ""
}

func (m *CMsgClientLogon) GetClientOsType() uint32 {
	if m != nil && m.ClientOsType != nil {
		return *m.ClientOsType
	}
	return 0
}

func (m *CMsgClientLogon) GetShouldRememberPassword() bool {
	if m != nil && m.ShouldRememberPassword != nil {
		return *m.ShouldRememberPassword
	}
	return Default_CMsgClientLogon_ShouldRememberPassword
}

func (m *CMsgClientLogon) GetWineVersion() string {
	if m != nil && m.WineVersion != nil {
		return *m.WineVersion
	}
	return ""
}

func (m *CMsgClientLogon) GetPingMsFromCellSearch() uint32 {
	if m != nil && m.PingMsFromCellSearch != nil {
		return *m.PingMsFromCellSearch
	}
	return 0
}

func (m *CMsgClientLogon) GetPublicIp() uint32 {
	if m != nil && m.PublicIp != nil {
		return *m.PublicIp
	}
	return 0
}

func (m *CMsgClientLogon) GetQosLevel() uint32 {
	if m != nil && m.QosLevel != nil {
		return *m.QosLevel
	}
	return 0
}

func (m *CMsgClientLogon) GetClientSuppliedSteamId() uint64 {
	if m != nil && m.ClientSuppliedSteamId != nil {
		return *m.ClientSuppliedSteamId
	}
	return 0
}

func (m *CMsgClientLogon) GetMachineId() []byte {
	if m != nil {
		return m.MachineId
	}
	return nil
}

func (m *CMsgClientLogon) GetLauncherType() uint32 {
	if m != nil && m.LauncherType != nil {
		return *m.LauncherType
	}
	return Default_CMsgClientLogon_LauncherType
}

func (m *CMsgClientLogon) GetUiMode() uint32 {
	if m != nil && m.UiMode != nil {
		return *m.UiMode
	}
	return Default_CMsgClientLogon_UiMode
}

func (m *CMsgClientLogon) GetSteam2AuthTicket() []byte {
	if m != nil {
		return m.Steam2AuthTicket
	}
	return nil
}

func (m *CMsgClientLogon) GetEmailAddress() string {
	if m != nil && m.EmailAddress != nil {
		return *m.EmailAddress
	}
	return ""
}

func (m *CMsgClientLogon) GetRtime32AccountCreation() uint32 {
	if m != nil && m.Rtime32AccountCreation != nil {
		return *m.Rtime32AccountCreation
	}
	return 0
}

func (m *CMsgClientLogon) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *CMsgClientLogon) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CMsgClientLogon) GetGameServerToken() string {
	if m != nil && m.GameServerToken != nil {
		return *m.GameServerToken
	}
	return ""
}

func (m *CMsgClientLogon) GetLoginKey() string {
	if m != nil && m.LoginKey != nil {
		return *m.LoginKey
	}
	return ""
}

func (m *CMsgClientLogon) GetWasConvertedDeprecatedMsg() bool {
	if m != nil && m.WasConvertedDeprecatedMsg != nil {
		return *m.WasConvertedDeprecatedMsg
	}
	return Default_CMsgClientLogon_WasConvertedDeprecatedMsg
}

func (m *CMsgClientLogon) GetAnonUserTargetAccountName() string {
	if m != nil && m.AnonUserTargetAccountName != nil {
		return *m.AnonUserTargetAccountName
	}
	return ""
}

func (m *CMsgClientLogon) GetResolvedUserSteamId() uint64 {
	if m != nil && m.ResolvedUserSteamId != nil {
		return *m.ResolvedUserSteamId
	}
	return 0
}

func (m *CMsgClientLogon) GetEresultSentryfile() int32 {
	if m != nil && m.EresultSentryfile != nil {
		return *m.EresultSentryfile
	}
	return 0
}

func (m *CMsgClientLogon) GetShaSentryfile() []byte {
	if m != nil {
		return m.ShaSentryfile
	}
	return nil
}

func (m *CMsgClientLogon) GetAuthCode() string {
	if m != nil && m.AuthCode != nil {
		return *m.AuthCode
	}
	return ""
}

func (m *CMsgClientLogon) GetOtpType() int32 {
	if m != nil && m.OtpType != nil {
		return *m.OtpType
	}
	return 0
}

func (m *CMsgClientLogon) GetOtpValue() uint32 {
	if m != nil && m.OtpValue != nil {
		return *m.OtpValue
	}
	return 0
}

func (m *CMsgClientLogon) GetOtpIdentifier() string {
	if m != nil && m.OtpIdentifier != nil {
		return *m.OtpIdentifier
	}
	return ""
}

func (m *CMsgClientLogon) GetSteam2TicketRequest() bool {
	if m != nil && m.Steam2TicketRequest != nil {
		return *m.Steam2TicketRequest
	}
	return false
}

func (m *CMsgClientLogon) GetSonyPsnTicket() []byte {
	if m != nil {
		return m.SonyPsnTicket
	}
	return nil
}

func (m *CMsgClientLogon) GetSonyPsnServiceId() string {
	if m != nil && m.SonyPsnServiceId != nil {
		return *m.SonyPsnServiceId
	}
	return ""
}

func (m *CMsgClientLogon) GetCreateNewPsnLinkedAccountIfNeeded() bool {
	if m != nil && m.CreateNewPsnLinkedAccountIfNeeded != nil {
		return *m.CreateNewPsnLinkedAccountIfNeeded
	}
	return Default_CMsgClientLogon_CreateNewPsnLinkedAccountIfNeeded
}

func (m *CMsgClientLogon) GetSonyPsnName() string {
	if m != nil && m.SonyPsnName != nil {
		return *m.SonyPsnName
	}
	return ""
}

func (m *CMsgClientLogon) GetGameServerAppId() int32 {
	if m != nil && m.GameServerAppId != nil {
		return *m.GameServerAppId
	}
	return 0
}

func (m *CMsgClientLogon) GetSteamguardDontRememberComputer() bool {
	if m != nil && m.SteamguardDontRememberComputer != nil {
		return *m.SteamguardDontRememberComputer
	}
	return false
}

func (m *CMsgClientLogon) GetMachineName() string {
	if m != nil && m.MachineName != nil {
		return *m.MachineName
	}
	return ""
}

func (m *CMsgClientLogon) GetMachineNameUserchosen() string {
	if m != nil && m.MachineNameUserchosen != nil {
		return *m.MachineNameUserchosen
	}
	return ""
}

func (m *CMsgClientLogon) GetCountryOverride() string {
	if m != nil && m.CountryOverride != nil {
		return *m.CountryOverride
	}
	return ""
}

func (m *CMsgClientLogon) GetIsSteamBox() bool {
	if m != nil && m.IsSteamBox != nil {
		return *m.IsSteamBox
	}
	return false
}

func (m *CMsgClientLogon) GetClientInstanceId() uint64 {
	if m != nil && m.ClientInstanceId != nil {
		return *m.ClientInstanceId
	}
	return 0
}

func (m *CMsgClientLogon) GetTwoFactorCode() string {
	if m != nil && m.TwoFactorCode != nil {
		return *m.TwoFactorCode
	}
	return ""
}

func (m *CMsgClientLogon) GetSupportsRateLimitResponse() bool {
	if m != nil && m.SupportsRateLimitResponse != nil {
		return *m.SupportsRateLimitResponse
	}
	return false
}

func (m *CMsgClientLogon) GetWebLogonNonce() string {
	if m != nil && m.WebLogonNonce != nil {
		return *m.WebLogonNonce
	}
	return ""
}

type CMsgClientLogonResponse struct {
	Eresult                     *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	OutOfGameHeartbeatSeconds   *int32  `protobuf:"varint,2,opt,name=out_of_game_heartbeat_seconds,json=outOfGameHeartbeatSeconds" json:"out_of_game_heartbeat_seconds,omitempty"`
	InGameHeartbeatSeconds      *int32  `protobuf:"varint,3,opt,name=in_game_heartbeat_seconds,json=inGameHeartbeatSeconds" json:"in_game_heartbeat_seconds,omitempty"`
	PublicIp                    *uint32 `protobuf:"varint,4,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	Rtime32ServerTime           *uint32 `protobuf:"fixed32,5,opt,name=rtime32_server_time,json=rtime32ServerTime" json:"rtime32_server_time,omitempty"`
	AccountFlags                *uint32 `protobuf:"varint,6,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	CellId                      *uint32 `protobuf:"varint,7,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	EmailDomain                 *string `protobuf:"bytes,8,opt,name=email_domain,json=emailDomain" json:"email_domain,omitempty"`
	Steam2Ticket                []byte  `protobuf:"bytes,9,opt,name=steam2_ticket,json=steam2Ticket" json:"steam2_ticket,omitempty"`
	EresultExtended             *int32  `protobuf:"varint,10,opt,name=eresult_extended,json=eresultExtended" json:"eresult_extended,omitempty"`
	WebapiAuthenticateUserNonce *string `protobuf:"bytes,11,opt,name=webapi_authenticate_user_nonce,json=webapiAuthenticateUserNonce" json:"webapi_authenticate_user_nonce,omitempty"`
	CellIdPingThreshold         *uint32 `protobuf:"varint,12,opt,name=cell_id_ping_threshold,json=cellIdPingThreshold" json:"cell_id_ping_threshold,omitempty"`
	UsePics                     *bool   `protobuf:"varint,13,opt,name=use_pics,json=usePics" json:"use_pics,omitempty"`
	VanityUrl                   *string `protobuf:"bytes,14,opt,name=vanity_url,json=vanityUrl" json:"vanity_url,omitempty"`
	ClientSuppliedSteamid       *uint64 `protobuf:"fixed64,20,opt,name=client_supplied_steamid,json=clientSuppliedSteamid" json:"client_supplied_steamid,omitempty"`
	IpCountryCode               *string `protobuf:"bytes,21,opt,name=ip_country_code,json=ipCountryCode" json:"ip_country_code,omitempty"`
	ParentalSettings            []byte  `protobuf:"bytes,22,opt,name=parental_settings,json=parentalSettings" json:"parental_settings,omitempty"`
	ParentalSettingSignature    []byte  `protobuf:"bytes,23,opt,name=parental_setting_signature,json=parentalSettingSignature" json:"parental_setting_signature,omitempty"`
	CountLoginfailuresToMigrate *int32  `protobuf:"varint,24,opt,name=count_loginfailures_to_migrate,json=countLoginfailuresToMigrate" json:"count_loginfailures_to_migrate,omitempty"`
	CountDisconnectsToMigrate   *int32  `protobuf:"varint,25,opt,name=count_disconnects_to_migrate,json=countDisconnectsToMigrate" json:"count_disconnects_to_migrate,omitempty"`
	OgsDataReportTimeWindow     *int32  `protobuf:"varint,26,opt,name=ogs_data_report_time_window,json=ogsDataReportTimeWindow" json:"ogs_data_report_time_window,omitempty"`
	ClientInstanceId            *uint64 `protobuf:"varint,27,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
	ForceClientUpdateCheck      *bool   `protobuf:"varint,28,opt,name=force_client_update_check,json=forceClientUpdateCheck" json:"force_client_update_check,omitempty"`
	XXX_unrecognized            []byte  `json:"-"`
}

func (m *CMsgClientLogonResponse) Reset()                    { *m = CMsgClientLogonResponse{} }
func (m *CMsgClientLogonResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientLogonResponse) ProtoMessage()               {}
func (*CMsgClientLogonResponse) Descriptor() ([]byte, []int) { return client_server_login_fileDescriptor0, []int{2} }

const Default_CMsgClientLogonResponse_Eresult int32 = 2

func (m *CMsgClientLogonResponse) GetEresult() int32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgClientLogonResponse_Eresult
}

func (m *CMsgClientLogonResponse) GetOutOfGameHeartbeatSeconds() int32 {
	if m != nil && m.OutOfGameHeartbeatSeconds != nil {
		return *m.OutOfGameHeartbeatSeconds
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetInGameHeartbeatSeconds() int32 {
	if m != nil && m.InGameHeartbeatSeconds != nil {
		return *m.InGameHeartbeatSeconds
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetPublicIp() uint32 {
	if m != nil && m.PublicIp != nil {
		return *m.PublicIp
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetRtime32ServerTime() uint32 {
	if m != nil && m.Rtime32ServerTime != nil {
		return *m.Rtime32ServerTime
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetAccountFlags() uint32 {
	if m != nil && m.AccountFlags != nil {
		return *m.AccountFlags
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetCellId() uint32 {
	if m != nil && m.CellId != nil {
		return *m.CellId
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetEmailDomain() string {
	if m != nil && m.EmailDomain != nil {
		return *m.EmailDomain
	}
	return ""
}

func (m *CMsgClientLogonResponse) GetSteam2Ticket() []byte {
	if m != nil {
		return m.Steam2Ticket
	}
	return nil
}

func (m *CMsgClientLogonResponse) GetEresultExtended() int32 {
	if m != nil && m.EresultExtended != nil {
		return *m.EresultExtended
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetWebapiAuthenticateUserNonce() string {
	if m != nil && m.WebapiAuthenticateUserNonce != nil {
		return *m.WebapiAuthenticateUserNonce
	}
	return ""
}

func (m *CMsgClientLogonResponse) GetCellIdPingThreshold() uint32 {
	if m != nil && m.CellIdPingThreshold != nil {
		return *m.CellIdPingThreshold
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetUsePics() bool {
	if m != nil && m.UsePics != nil {
		return *m.UsePics
	}
	return false
}

func (m *CMsgClientLogonResponse) GetVanityUrl() string {
	if m != nil && m.VanityUrl != nil {
		return *m.VanityUrl
	}
	return ""
}

func (m *CMsgClientLogonResponse) GetClientSuppliedSteamid() uint64 {
	if m != nil && m.ClientSuppliedSteamid != nil {
		return *m.ClientSuppliedSteamid
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetIpCountryCode() string {
	if m != nil && m.IpCountryCode != nil {
		return *m.IpCountryCode
	}
	return ""
}

func (m *CMsgClientLogonResponse) GetParentalSettings() []byte {
	if m != nil {
		return m.ParentalSettings
	}
	return nil
}

func (m *CMsgClientLogonResponse) GetParentalSettingSignature() []byte {
	if m != nil {
		return m.ParentalSettingSignature
	}
	return nil
}

func (m *CMsgClientLogonResponse) GetCountLoginfailuresToMigrate() int32 {
	if m != nil && m.CountLoginfailuresToMigrate != nil {
		return *m.CountLoginfailuresToMigrate
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetCountDisconnectsToMigrate() int32 {
	if m != nil && m.CountDisconnectsToMigrate != nil {
		return *m.CountDisconnectsToMigrate
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetOgsDataReportTimeWindow() int32 {
	if m != nil && m.OgsDataReportTimeWindow != nil {
		return *m.OgsDataReportTimeWindow
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetClientInstanceId() uint64 {
	if m != nil && m.ClientInstanceId != nil {
		return *m.ClientInstanceId
	}
	return 0
}

func (m *CMsgClientLogonResponse) GetForceClientUpdateCheck() bool {
	if m != nil && m.ForceClientUpdateCheck != nil {
		return *m.ForceClientUpdateCheck
	}
	return false
}

type CMsgClientRequestWebAPIAuthenticateUserNonce struct {
	TokenType        *int32 `protobuf:"varint,1,opt,name=token_type,json=tokenType,def=-1" json:"token_type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClientRequestWebAPIAuthenticateUserNonce) Reset() {
	*m = CMsgClientRequestWebAPIAuthenticateUserNonce{}
}
func (m *CMsgClientRequestWebAPIAuthenticateUserNonce) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientRequestWebAPIAuthenticateUserNonce) ProtoMessage() {}
func (*CMsgClientRequestWebAPIAuthenticateUserNonce) Descriptor() ([]byte, []int) {
	return client_server_login_fileDescriptor0, []int{3}
}

const Default_CMsgClientRequestWebAPIAuthenticateUserNonce_TokenType int32 = -1

func (m *CMsgClientRequestWebAPIAuthenticateUserNonce) GetTokenType() int32 {
	if m != nil && m.TokenType != nil {
		return *m.TokenType
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonce_TokenType
}

type CMsgClientRequestWebAPIAuthenticateUserNonceResponse struct {
	Eresult                     *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	WebapiAuthenticateUserNonce *string `protobuf:"bytes,11,opt,name=webapi_authenticate_user_nonce,json=webapiAuthenticateUserNonce" json:"webapi_authenticate_user_nonce,omitempty"`
	TokenType                   *int32  `protobuf:"varint,3,opt,name=token_type,json=tokenType,def=-1" json:"token_type,omitempty"`
	XXX_unrecognized            []byte  `json:"-"`
}

func (m *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) Reset() {
	*m = CMsgClientRequestWebAPIAuthenticateUserNonceResponse{}
}
func (m *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientRequestWebAPIAuthenticateUserNonceResponse) ProtoMessage() {}
func (*CMsgClientRequestWebAPIAuthenticateUserNonceResponse) Descriptor() ([]byte, []int) {
	return client_server_login_fileDescriptor0, []int{4}
}

const Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_Eresult int32 = 2
const Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_TokenType int32 = -1

func (m *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetEresult() int32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_Eresult
}

func (m *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetWebapiAuthenticateUserNonce() string {
	if m != nil && m.WebapiAuthenticateUserNonce != nil {
		return *m.WebapiAuthenticateUserNonce
	}
	return ""
}

func (m *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetTokenType() int32 {
	if m != nil && m.TokenType != nil {
		return *m.TokenType
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_TokenType
}

type CMsgClientLogOff struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClientLogOff) Reset()                    { *m = CMsgClientLogOff{} }
func (m *CMsgClientLogOff) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientLogOff) ProtoMessage()               {}
func (*CMsgClientLogOff) Descriptor() ([]byte, []int) { return client_server_login_fileDescriptor0, []int{5} }

type CMsgClientLoggedOff struct {
	Eresult          *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClientLoggedOff) Reset()                    { *m = CMsgClientLoggedOff{} }
func (m *CMsgClientLoggedOff) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientLoggedOff) ProtoMessage()               {}
func (*CMsgClientLoggedOff) Descriptor() ([]byte, []int) { return client_server_login_fileDescriptor0, []int{6} }

const Default_CMsgClientLoggedOff_Eresult int32 = 2

func (m *CMsgClientLoggedOff) GetEresult() int32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgClientLoggedOff_Eresult
}

type CMsgClientNewLoginKey struct {
	UniqueId         *uint32 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	LoginKey         *string `protobuf:"bytes,2,opt,name=login_key,json=loginKey" json:"login_key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientNewLoginKey) Reset()                    { *m = CMsgClientNewLoginKey{} }
func (m *CMsgClientNewLoginKey) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientNewLoginKey) ProtoMessage()               {}
func (*CMsgClientNewLoginKey) Descriptor() ([]byte, []int) { return client_server_login_fileDescriptor0, []int{7} }

func (m *CMsgClientNewLoginKey) GetUniqueId() uint32 {
	if m != nil && m.UniqueId != nil {
		return *m.UniqueId
	}
	return 0
}

func (m *CMsgClientNewLoginKey) GetLoginKey() string {
	if m != nil && m.LoginKey != nil {
		return *m.LoginKey
	}
	return ""
}

type CMsgClientNewLoginKeyAccepted struct {
	UniqueId         *uint32 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientNewLoginKeyAccepted) Reset()                    { *m = CMsgClientNewLoginKeyAccepted{} }
func (m *CMsgClientNewLoginKeyAccepted) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientNewLoginKeyAccepted) ProtoMessage()               {}
func (*CMsgClientNewLoginKeyAccepted) Descriptor() ([]byte, []int) { return client_server_login_fileDescriptor0, []int{8} }

func (m *CMsgClientNewLoginKeyAccepted) GetUniqueId() uint32 {
	if m != nil && m.UniqueId != nil {
		return *m.UniqueId
	}
	return 0
}

type CMsgClientAccountInfo struct {
	PersonaName                     *string `protobuf:"bytes,1,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	IpCountry                       *string `protobuf:"bytes,2,opt,name=ip_country,json=ipCountry" json:"ip_country,omitempty"`
	CountAuthedComputers            *int32  `protobuf:"varint,5,opt,name=count_authed_computers,json=countAuthedComputers" json:"count_authed_computers,omitempty"`
	AccountFlags                    *uint32 `protobuf:"varint,7,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	FacebookId                      *uint64 `protobuf:"varint,8,opt,name=facebook_id,json=facebookId" json:"facebook_id,omitempty"`
	FacebookName                    *string `protobuf:"bytes,9,opt,name=facebook_name,json=facebookName" json:"facebook_name,omitempty"`
	SteamguardNotifyNewmachines     *bool   `protobuf:"varint,14,opt,name=steamguard_notify_newmachines,json=steamguardNotifyNewmachines" json:"steamguard_notify_newmachines,omitempty"`
	SteamguardMachineNameUserChosen *string `protobuf:"bytes,15,opt,name=steamguard_machine_name_user_chosen,json=steamguardMachineNameUserChosen" json:"steamguard_machine_name_user_chosen,omitempty"`
	IsPhoneVerified                 *bool   `protobuf:"varint,16,opt,name=is_phone_verified,json=isPhoneVerified" json:"is_phone_verified,omitempty"`
	TwoFactorState                  *uint32 `protobuf:"varint,17,opt,name=two_factor_state,json=twoFactorState" json:"two_factor_state,omitempty"`
	IsPhoneIdentifying              *bool   `protobuf:"varint,18,opt,name=is_phone_identifying,json=isPhoneIdentifying" json:"is_phone_identifying,omitempty"`
	IsPhoneNeedingReverify          *bool   `protobuf:"varint,19,opt,name=is_phone_needing_reverify,json=isPhoneNeedingReverify" json:"is_phone_needing_reverify,omitempty"`
	XXX_unrecognized                []byte  `json:"-"`
}

func (m *CMsgClientAccountInfo) Reset()                    { *m = CMsgClientAccountInfo{} }
func (m *CMsgClientAccountInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientAccountInfo) ProtoMessage()               {}
func (*CMsgClientAccountInfo) Descriptor() ([]byte, []int) { return client_server_login_fileDescriptor0, []int{9} }

func (m *CMsgClientAccountInfo) GetPersonaName() string {
	if m != nil && m.PersonaName != nil {
		return *m.PersonaName
	}
	return ""
}

func (m *CMsgClientAccountInfo) GetIpCountry() string {
	if m != nil && m.IpCountry != nil {
		return *m.IpCountry
	}
	return ""
}

func (m *CMsgClientAccountInfo) GetCountAuthedComputers() int32 {
	if m != nil && m.CountAuthedComputers != nil {
		return *m.CountAuthedComputers
	}
	return 0
}

func (m *CMsgClientAccountInfo) GetAccountFlags() uint32 {
	if m != nil && m.AccountFlags != nil {
		return *m.AccountFlags
	}
	return 0
}

func (m *CMsgClientAccountInfo) GetFacebookId() uint64 {
	if m != nil && m.FacebookId != nil {
		return *m.FacebookId
	}
	return 0
}

func (m *CMsgClientAccountInfo) GetFacebookName() string {
	if m != nil && m.FacebookName != nil {
		return *m.FacebookName
	}
	return ""
}

func (m *CMsgClientAccountInfo) GetSteamguardNotifyNewmachines() bool {
	if m != nil && m.SteamguardNotifyNewmachines != nil {
		return *m.SteamguardNotifyNewmachines
	}
	return false
}

func (m *CMsgClientAccountInfo) GetSteamguardMachineNameUserChosen() string {
	if m != nil && m.SteamguardMachineNameUserChosen != nil {
		return *m.SteamguardMachineNameUserChosen
	}
	return ""
}

func (m *CMsgClientAccountInfo) GetIsPhoneVerified() bool {
	if m != nil && m.IsPhoneVerified != nil {
		return *m.IsPhoneVerified
	}
	return false
}

func (m *CMsgClientAccountInfo) GetTwoFactorState() uint32 {
	if m != nil && m.TwoFactorState != nil {
		return *m.TwoFactorState
	}
	return 0
}

func (m *CMsgClientAccountInfo) GetIsPhoneIdentifying() bool {
	if m != nil && m.IsPhoneIdentifying != nil {
		return *m.IsPhoneIdentifying
	}
	return false
}

func (m *CMsgClientAccountInfo) GetIsPhoneNeedingReverify() bool {
	if m != nil && m.IsPhoneNeedingReverify != nil {
		return *m.IsPhoneNeedingReverify
	}
	return false
}

func init() {
	proto.RegisterType((*CMsgClientHeartBeat)(nil), "CMsgClientHeartBeat")
	proto.RegisterType((*CMsgClientLogon)(nil), "CMsgClientLogon")
	proto.RegisterType((*CMsgClientLogonResponse)(nil), "CMsgClientLogonResponse")
	proto.RegisterType((*CMsgClientRequestWebAPIAuthenticateUserNonce)(nil), "CMsgClientRequestWebAPIAuthenticateUserNonce")
	proto.RegisterType((*CMsgClientRequestWebAPIAuthenticateUserNonceResponse)(nil), "CMsgClientRequestWebAPIAuthenticateUserNonceResponse")
	proto.RegisterType((*CMsgClientLogOff)(nil), "CMsgClientLogOff")
	proto.RegisterType((*CMsgClientLoggedOff)(nil), "CMsgClientLoggedOff")
	proto.RegisterType((*CMsgClientNewLoginKey)(nil), "CMsgClientNewLoginKey")
	proto.RegisterType((*CMsgClientNewLoginKeyAccepted)(nil), "CMsgClientNewLoginKeyAccepted")
	proto.RegisterType((*CMsgClientAccountInfo)(nil), "CMsgClientAccountInfo")
}

func init() { proto.RegisterFile("steammessages_clientserver_login.proto", client_server_login_fileDescriptor0) }

var client_server_login_fileDescriptor0 = []byte{
	// 2013 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xed, 0x72, 0x14, 0xb9,
	0x15, 0xcd, 0x00, 0xc6, 0xb6, 0x18, 0x63, 0xbb, 0x8d, 0x6d, 0x19, 0xf3, 0x61, 0xbc, 0xc9, 0xae,
	0x17, 0x96, 0xad, 0x8d, 0xa1, 0x36, 0x59, 0x8a, 0xaa, 0x8d, 0x19, 0x42, 0x98, 0x8a, 0x6d, 0x4c,
	0x8f, 0x81, 0x7c, 0x2b, 0x9a, 0xee, 0xdb, 0x3d, 0x2a, 0x77, 0x4b, 0x8d, 0xa4, 0xf6, 0x30, 0xff,
	0xf2, 0x5e, 0xfb, 0x10, 0x79, 0x82, 0xbc, 0x4b, 0x4a, 0x57, 0xea, 0xf9, 0x60, 0xcd, 0x56, 0x52,
	0xb5, 0x3f, 0xfb, 0x9c, 0x23, 0xe9, 0x4a, 0x3a, 0xf7, 0xea, 0x36, 0xf9, 0xdc, 0x58, 0xe0, 0x65,
	0x09, 0xc6, 0xf0, 0x1c, 0x0c, 0x4b, 0x0a, 0x01, 0xd2, 0x1a, 0xd0, 0xe7, 0xa0, 0x59, 0xa1, 0x72,
	0x21, 0xbf, 0xae, 0xb4, 0xb2, 0xea, 0x26, 0x9d, 0xd5, 0xf5, 0xb9, 0x01, 0xcf, 0xec, 0xae, 0x93,
	0xb5, 0xce, 0x91, 0xc9, 0x3b, 0x38, 0xf2, 0x25, 0x70, 0x6d, 0x9f, 0x01, 0xb7, 0xbb, 0x3f, 0xac,
	0x90, 0xe5, 0x09, 0x7e, 0xa8, 0x72, 0x25, 0xa3, 0x2f, 0xc9, 0x0a, 0x8e, 0x49, 0x54, 0xc1, 0xce,
	0x41, 0x1b, 0xa1, 0x24, 0x6d, 0xed, 0xb4, 0xf6, 0x96, 0xe2, 0xe5, 0x06, 0x7f, 0xeb, 0xe1, 0xe8,
	0x5b, 0xb2, 0xa9, 0xfa, 0x59, 0x6d, 0x6c, 0x9d, 0x70, 0x0b, 0x29, 0xab, 0xb4, 0x38, 0xe7, 0x16,
	0x98, 0xa8, 0xe8, 0x25, 0x1c, 0xb1, 0x3e, 0x4d, 0x9f, 0x78, 0xb6, 0x5b, 0x45, 0x9b, 0x64, 0x3e,
	0x81, 0xa2, 0x60, 0x22, 0xa5, 0x97, 0x51, 0x77, 0xd5, 0x7d, 0x76, 0xd3, 0xe8, 0x73, 0xb2, 0x5c,
	0x70, 0x63, 0x99, 0x01, 0xe3, 0x16, 0x70, 0x82, 0x2b, 0x28, 0x58, 0x72, 0x70, 0xcf, 0xa3, 0xdd,
	0x34, 0x7a, 0x4c, 0x36, 0xfc, 0x21, 0xb0, 0x8a, 0x27, 0x67, 0x3c, 0x87, 0x71, 0xa4, 0x73, 0x28,
	0xbf, 0xe1, 0xd9, 0x13, 0x4f, 0x36, 0xe1, 0x7e, 0x41, 0x96, 0xc3, 0xa8, 0x82, 0xcb, 0xbc, 0xe6,
	0x39, 0xd0, 0xab, 0x3b, 0xad, 0xbd, 0xc5, 0xf8, 0xba, 0x87, 0x0f, 0x03, 0x1a, 0xfd, 0x92, 0x04,
	0x84, 0x29, 0xc3, 0xec, 0xa8, 0x02, 0x3a, 0x8f, 0xd3, 0xb6, 0x3d, 0xfa, 0xca, 0x9c, 0x8e, 0x2a,
	0x88, 0xbe, 0x27, 0xd4, 0x0c, 0x54, 0x5d, 0xa4, 0x4c, 0x43, 0x09, 0x65, 0x1f, 0x34, 0xab, 0xb8,
	0x31, 0x43, 0xa5, 0x53, 0xba, 0xb0, 0xd3, 0xda, 0x5b, 0x78, 0x32, 0x97, 0xf1, 0xc2, 0x40, 0xbc,
	0xe1, 0x65, 0x71, 0x50, 0x9d, 0x04, 0x51, 0x74, 0x8f, 0xb4, 0x87, 0x42, 0x4e, 0x62, 0x5f, 0xc4,
	0x60, 0xae, 0x39, 0x6c, 0x72, 0xc2, 0xb4, 0x12, 0x32, 0x67, 0xa5, 0x61, 0x99, 0x56, 0x25, 0xc3,
	0x63, 0x33, 0xc0, 0x75, 0x32, 0xa0, 0xc4, 0x6f, 0xd5, 0xf1, 0x47, 0xe6, 0x85, 0x56, 0x65, 0x07,
	0x8a, 0xa2, 0x87, 0x5c, 0xb4, 0x4d, 0x16, 0xab, 0xba, 0x5f, 0x88, 0xc4, 0xdd, 0xc5, 0x0d, 0x14,
	0x2e, 0x78, 0xa0, 0x5b, 0x39, 0xf2, 0xbd, 0x32, 0xac, 0x80, 0x73, 0x28, 0xe8, 0xba, 0x27, 0xdf,
	0x2b, 0x73, 0xe8, 0xbe, 0xa3, 0xdf, 0x10, 0x1a, 0xf6, 0x6e, 0xea, 0xaa, 0x2a, 0x04, 0xa4, 0x0c,
	0x5d, 0xe5, 0xee, 0x62, 0x63, 0xa7, 0xb5, 0x77, 0x35, 0x5e, 0xf7, 0x7c, 0x2f, 0xd0, 0x3d, 0xc7,
	0x76, 0xd3, 0xe8, 0x36, 0x21, 0x25, 0x4f, 0x06, 0x6e, 0x43, 0x22, 0xa5, 0x77, 0x76, 0x5a, 0x7b,
	0xed, 0x78, 0x31, 0x20, 0x78, 0xb5, 0x4b, 0x05, 0xaf, 0x65, 0x32, 0x00, 0xed, 0x8f, 0xf4, 0xae,
	0x5b, 0xf8, 0x49, 0xeb, 0x9b, 0xb8, 0xdd, 0xe0, 0x78, 0xaa, 0x37, 0xc9, 0x7c, 0x2d, 0x58, 0xa9,
	0x52, 0xa0, 0x3b, 0x8d, 0xe2, 0x6a, 0x2d, 0x8e, 0x54, 0x0a, 0xd1, 0x57, 0x24, 0xc2, 0x58, 0xf6,
	0x19, 0xaf, 0xed, 0x80, 0x59, 0x91, 0x9c, 0x81, 0xa5, 0x5f, 0xe2, 0x52, 0x2b, 0x9e, 0x39, 0xa8,
	0xed, 0xe0, 0x14, 0xf1, 0xe8, 0x33, 0xb2, 0x04, 0x25, 0x17, 0x05, 0xe3, 0x69, 0xaa, 0xc1, 0x18,
	0x7a, 0x1f, 0xcf, 0xb7, 0x8d, 0xe0, 0x81, 0xc7, 0xa2, 0xdf, 0x12, 0xaa, 0xad, 0x28, 0xe1, 0xd1,
	0x3e, 0xe3, 0x49, 0xa2, 0x6a, 0x69, 0x59, 0xa2, 0x81, 0x5b, 0x77, 0x1f, 0x0f, 0x76, 0x5a, 0x7b,
	0xf3, 0xf1, 0x46, 0xe0, 0x0f, 0x3c, 0xdd, 0x09, 0xac, 0xbb, 0xbd, 0x66, 0x84, 0xe4, 0x25, 0xd0,
	0x7d, 0x7f, 0x7b, 0x01, 0x3b, 0xe6, 0xa5, 0xdb, 0xcb, 0xc2, 0xd8, 0x11, 0x8f, 0x90, 0x1e, 0x7f,
	0x47, 0xf7, 0xc9, 0x6a, 0xce, 0x4b, 0x60, 0x21, 0x8d, 0xad, 0x3a, 0x03, 0x49, 0x1f, 0xa3, 0x68,
	0xd9, 0x11, 0x3d, 0xc4, 0x4f, 0x1d, 0xec, 0x2e, 0x0c, 0xd3, 0x9c, 0x9d, 0xc1, 0x88, 0x3e, 0xf5,
	0x13, 0x21, 0xf0, 0x47, 0x18, 0x45, 0x2f, 0xc8, 0xad, 0x21, 0x37, 0x2c, 0x51, 0xf2, 0x1c, 0xb4,
	0xcb, 0xc2, 0x14, 0x2a, 0x0d, 0x3e, 0x21, 0x4b, 0x93, 0xd3, 0x17, 0xd3, 0x56, 0xdc, 0x1a, 0x72,
	0xd3, 0x69, 0x94, 0xcf, 0xc7, 0xc2, 0x23, 0x93, 0x47, 0xbf, 0x23, 0xb7, 0xb9, 0x54, 0x92, 0xd5,
	0xc6, 0x85, 0xc3, 0x75, 0x0e, 0x96, 0xcd, 0x6c, 0xf0, 0x04, 0x17, 0xde, 0x72, 0xa2, 0x37, 0x06,
	0xf4, 0x29, 0x4a, 0x0e, 0xa6, 0xb6, 0xfb, 0x88, 0x6c, 0x68, 0x30, 0xaa, 0x38, 0x87, 0xd4, 0xcf,
	0x32, 0x36, 0xce, 0x6b, 0x34, 0xce, 0x5a, 0xc3, 0xba, 0xe1, 0x8d, 0x6d, 0x1e, 0x92, 0x08, 0x34,
	0x98, 0xba, 0x70, 0x59, 0x2f, 0xad, 0x1e, 0x65, 0xa2, 0x00, 0x1a, 0xef, 0xb4, 0xf6, 0xe6, 0xe2,
	0xd5, 0xc0, 0xf4, 0xc6, 0x44, 0xf4, 0x2b, 0x72, 0xdd, 0x0c, 0xf8, 0xb4, 0xb4, 0x87, 0xd7, 0xbf,
	0x64, 0x06, 0x7c, 0x4a, 0xb6, 0x4d, 0x16, 0xd1, 0x22, 0x89, 0xf3, 0xd1, 0xa9, 0x3f, 0x31, 0x07,
	0x74, 0x9c, 0x8d, 0xb6, 0xc8, 0x82, 0xb2, 0x95, 0x77, 0xe1, 0x1b, 0x5c, 0x68, 0x5e, 0xd9, 0x0a,
	0xdd, 0xb7, 0x4d, 0x16, 0x1d, 0x75, 0xce, 0x8b, 0x1a, 0xe8, 0x5b, 0x9f, 0x1a, 0xca, 0x56, 0x6f,
	0xdd, 0xb7, 0x5b, 0xdb, 0x91, 0x22, 0x05, 0x69, 0x45, 0x26, 0x40, 0xd3, 0x77, 0x38, 0xf3, 0x92,
	0xb2, 0x55, 0x77, 0x0c, 0x46, 0xfb, 0x64, 0x3d, 0xb8, 0xd4, 0x1b, 0x94, 0x69, 0x78, 0x5f, 0x83,
	0xb1, 0xf4, 0x4f, 0xee, 0x26, 0xe2, 0x35, 0x4f, 0x7a, 0x93, 0xc6, 0x9e, 0x72, 0x85, 0xcf, 0x28,
	0x39, 0x62, 0x95, 0x91, 0x8d, 0xad, 0xff, 0x12, 0xf6, 0xa5, 0xe4, 0xe8, 0xc4, 0xc8, 0xe0, 0xe9,
	0x87, 0x64, 0x6d, 0xac, 0x73, 0xce, 0x11, 0x09, 0x66, 0xdb, 0x5f, 0x31, 0x8e, 0x95, 0xa0, 0xed,
	0x79, 0xa2, 0x9b, 0x46, 0x7f, 0x26, 0x5f, 0xa0, 0x9b, 0x81, 0x49, 0x18, 0xe2, 0xa0, 0x42, 0xc8,
	0x33, 0x48, 0xc7, 0x17, 0x2b, 0x32, 0x26, 0x01, 0x52, 0x48, 0xe9, 0xdf, 0xa6, 0x6d, 0x72, 0xcf,
	0x8f, 0x3a, 0x86, 0xe1, 0x89, 0x91, 0x87, 0x38, 0x24, 0x5c, 0x74, 0x37, 0x3b, 0x46, 0x7d, 0xb4,
	0x4b, 0x96, 0xc6, 0x91, 0xa0, 0x3d, 0xfe, 0xee, 0xfd, 0x1f, 0x62, 0x40, 0x43, 0x3c, 0x20, 0xd1,
	0xb4, 0xc7, 0x79, 0xe5, 0x0e, 0x8f, 0xfe, 0x03, 0x8f, 0x7c, 0xca, 0xe4, 0x07, 0x55, 0xd5, 0x4d,
	0xa3, 0x2e, 0xb9, 0x87, 0x27, 0x93, 0xd7, 0x5c, 0xa7, 0x2c, 0x55, 0xd2, 0x4e, 0xea, 0x6a, 0xa2,
	0xca, 0xaa, 0xb6, 0xa0, 0x29, 0xc3, 0x23, 0xbc, 0x33, 0x11, 0x3e, 0x57, 0xd2, 0x36, 0x85, 0xb5,
	0x13, 0x54, 0x2e, 0x35, 0x9b, 0x52, 0x84, 0xa1, 0xfd, 0xd3, 0x87, 0x16, 0x30, 0x0c, 0xed, 0x5b,
	0xb2, 0x39, 0x2d, 0x41, 0xbf, 0x26, 0x03, 0x65, 0x40, 0x52, 0x8e, 0xea, 0xf5, 0x29, 0xf5, 0x9b,
	0x31, 0xe9, 0x5e, 0x47, 0x3c, 0x07, 0x3d, 0x62, 0xea, 0x1c, 0xb4, 0x16, 0x29, 0xd0, 0xbe, 0xcf,
	0xda, 0x80, 0xbf, 0x0a, 0x70, 0xb4, 0x43, 0xda, 0xc2, 0x84, 0x1c, 0xe8, 0xab, 0x0f, 0x34, 0xc1,
	0xd8, 0x89, 0x30, 0x68, 0xfd, 0x67, 0xea, 0x83, 0xab, 0x67, 0xa1, 0xd6, 0x0a, 0x69, 0x2c, 0x97,
	0xfe, 0x32, 0xd3, 0x9d, 0xd6, 0xde, 0x95, 0x78, 0xc5, 0x33, 0xdd, 0x40, 0xf8, 0xc7, 0xd1, 0x0e,
	0x15, 0xcb, 0x78, 0x62, 0x95, 0xf6, 0xce, 0x06, 0xef, 0x3f, 0x3b, 0x54, 0x2f, 0x10, 0x45, 0x7b,
	0x7f, 0x4f, 0x6e, 0xb9, 0xd2, 0xad, 0xb4, 0x35, 0x4c, 0xbb, 0xbb, 0x2f, 0x44, 0x29, 0xdc, 0x61,
	0x9a, 0x4a, 0x49, 0x03, 0x34, 0xc3, 0x38, 0xb6, 0x1a, 0x4d, 0xcc, 0x2d, 0x1c, 0x3a, 0x45, 0x1c,
	0x04, 0x6e, 0xa1, 0x21, 0xf4, 0x5d, 0x67, 0xa1, 0x24, 0x93, 0x4a, 0x26, 0x40, 0x73, 0xbf, 0xd0,
	0x10, 0xfa, 0xd8, 0x24, 0x1c, 0x3b, 0x70, 0xf7, 0x3f, 0x0b, 0x64, 0xf3, 0xa3, 0xee, 0x61, 0x3c,
	0xc7, 0x36, 0x99, 0x0f, 0xc9, 0x8b, 0xcd, 0xc3, 0xdc, 0x93, 0xd6, 0x7e, 0xdc, 0x20, 0xae, 0xd4,
	0xa8, 0xda, 0x32, 0x95, 0x31, 0xb4, 0xc7, 0xc0, 0xf5, 0x23, 0x7d, 0xe0, 0xae, 0x02, 0x24, 0x4a,
	0xa6, 0x06, 0xbb, 0x87, 0xb9, 0x78, 0x4b, 0xd5, 0xf6, 0x55, 0xf6, 0x07, 0x5e, 0xc2, 0xcb, 0x46,
	0xd1, 0xf3, 0x82, 0xe8, 0x3b, 0xb2, 0x25, 0xe4, 0xa7, 0x46, 0x5f, 0xc6, 0xd1, 0x1b, 0x42, 0x5e,
	0x38, 0x74, 0xe6, 0x69, 0xbc, 0xf2, 0xd1, 0xd3, 0xf8, 0x35, 0x59, 0x6b, 0x9e, 0x83, 0xa6, 0x30,
	0x8b, 0x12, 0xb0, 0xab, 0x98, 0x8f, 0x57, 0x03, 0x15, 0x4a, 0xb3, 0x28, 0xc1, 0xbd, 0x31, 0x4d,
	0x2a, 0x65, 0x05, 0xcf, 0x0d, 0x36, 0x14, 0x4b, 0x71, 0xf3, 0x32, 0xbc, 0x70, 0xd8, 0x74, 0xbb,
	0x33, 0x3f, 0xd3, 0xee, 0xdc, 0x23, 0xfe, 0x31, 0x62, 0xa9, 0x2a, 0xb9, 0x90, 0xd8, 0x35, 0x2c,
	0xc6, 0xd7, 0x10, 0x7b, 0x8e, 0x90, 0x5b, 0x60, 0xa6, 0x98, 0x60, 0x93, 0xd0, 0x8e, 0xdb, 0xd3,
	0x45, 0xc4, 0x99, 0xb2, 0xa9, 0xa1, 0xf0, 0xc1, 0x82, 0x74, 0xf9, 0x4c, 0x7c, 0x96, 0x05, 0xfc,
	0xf7, 0x01, 0x8e, 0x3a, 0xe4, 0xce, 0x10, 0xfa, 0xbc, 0x12, 0xf8, 0x84, 0xba, 0x9a, 0xe5, 0x1e,
	0x00, 0x5f, 0xae, 0xfd, 0x55, 0x5f, 0xc3, 0x20, 0xb6, 0xbd, 0xea, 0x60, 0x4a, 0xe4, 0xb2, 0x00,
	0x2f, 0xde, 0x15, 0xfa, 0xb0, 0x21, 0x86, 0xdd, 0x89, 0x1d, 0x68, 0x30, 0x03, 0x55, 0xa4, 0xb4,
	0x8d, 0xfb, 0x5b, 0xf3, 0xfb, 0x3b, 0x11, 0x32, 0x3f, 0x6d, 0x28, 0x57, 0x75, 0x6b, 0x03, 0xac,
	0x12, 0x89, 0xa1, 0x4b, 0x68, 0xc1, 0xf9, 0xda, 0xc0, 0x89, 0x48, 0x8c, 0x6b, 0x1d, 0xce, 0xb9,
	0x14, 0x76, 0xc4, 0x6a, 0x5d, 0xd0, 0xeb, 0x18, 0xc0, 0xa2, 0x47, 0xde, 0xe8, 0xc2, 0xe5, 0xea,
	0x85, 0x2d, 0x89, 0x48, 0xb1, 0xb5, 0xb9, 0xb8, 0x23, 0x11, 0x98, 0x30, 0xa2, 0x62, 0x4d, 0xba,
	0x62, 0xc2, 0xac, 0x7b, 0x1f, 0x8b, 0xaa, 0xe3, 0x51, 0x4c, 0x98, 0x07, 0x64, 0xb5, 0xe2, 0x1a,
	0xa4, 0xe5, 0xae, 0xb7, 0xb2, 0x56, 0xc8, 0xdc, 0x60, 0xaf, 0xd3, 0x8e, 0x57, 0x1a, 0xa2, 0x17,
	0xf0, 0xe8, 0x29, 0xb9, 0xf9, 0xb1, 0x98, 0x19, 0x91, 0x4b, 0x6e, 0x6b, 0x0d, 0x74, 0x13, 0x47,
	0xd1, 0x8f, 0x46, 0xf5, 0x1a, 0xde, 0x1d, 0xbf, 0x77, 0x0b, 0x3e, 0xdf, 0x19, 0x17, 0x45, 0xad,
	0xc1, 0x30, 0xab, 0x58, 0x29, 0x72, 0x97, 0xac, 0x94, 0xe2, 0xbd, 0x6d, 0xa3, 0xea, 0x70, 0x5a,
	0x74, 0xaa, 0x8e, 0xbc, 0xc4, 0x25, 0xb8, 0x9f, 0x24, 0x15, 0x26, 0x51, 0x52, 0x42, 0x62, 0x67,
	0xa6, 0xd8, 0xf2, 0xd9, 0x83, 0x9a, 0xe7, 0x13, 0xc9, 0x64, 0x82, 0xa7, 0x64, 0x5b, 0xe5, 0x86,
	0xa5, 0xdc, 0x72, 0xa6, 0xc1, 0x55, 0x01, 0xb4, 0x39, 0x1b, 0x0a, 0x99, 0xaa, 0x21, 0xbd, 0x89,
	0xe3, 0x37, 0x55, 0x6e, 0x9e, 0x73, 0xcb, 0x63, 0x14, 0x38, 0xb7, 0xbf, 0x43, 0xfa, 0x13, 0x55,
	0x6b, 0xfb, 0x13, 0x55, 0xeb, 0x3b, 0xb2, 0x95, 0x29, 0x9d, 0x40, 0xf8, 0x6b, 0x61, 0x75, 0x95,
	0x3a, 0xc3, 0x25, 0x03, 0x48, 0xce, 0xe8, 0x2d, 0xf4, 0xc1, 0x06, 0x0a, 0x7c, 0x15, 0x79, 0x83,
	0x74, 0xc7, 0xb1, 0xbb, 0xaf, 0xc9, 0x57, 0x93, 0xf2, 0x12, 0x5e, 0xca, 0x77, 0xd0, 0x3f, 0x38,
	0xe9, 0x5e, 0x6c, 0xcb, 0x7b, 0x84, 0x60, 0x1b, 0xe5, 0x5f, 0x76, 0x5f, 0x76, 0x2e, 0x3d, 0xfc,
	0x75, 0xbc, 0x88, 0xa8, 0x7b, 0xdf, 0x77, 0x7f, 0x68, 0x91, 0xc7, 0xff, 0xcf, 0x9c, 0xff, 0x5b,
	0x3d, 0xfb, 0x59, 0x92, 0x6a, 0x36, 0xfa, 0xcb, 0x17, 0x45, 0x1f, 0x91, 0x95, 0x99, 0x7a, 0xfb,
	0x2a, 0xcb, 0x76, 0xf7, 0xa7, 0xff, 0xec, 0x0e, 0x55, 0x9e, 0x43, 0xfa, 0x2a, 0xcb, 0x7e, 0x32,
	0xde, 0xdd, 0xd7, 0x64, 0x7d, 0x32, 0xe6, 0x18, 0x86, 0x87, 0x4d, 0x2f, 0xb9, 0x4d, 0x16, 0x6b,
	0x29, 0xde, 0xd7, 0x78, 0xa3, 0xfe, 0xa7, 0x6f, 0xc1, 0x03, 0xdd, 0x74, 0xb6, 0x0b, 0xbd, 0x34,
	0xdb, 0x85, 0xee, 0x3e, 0x25, 0xb7, 0x2f, 0x9c, 0xf2, 0x20, 0x49, 0xa0, 0xb2, 0x90, 0xfe, 0xe4,
	0xd4, 0xbb, 0xff, 0xbe, 0x32, 0x1d, 0x51, 0xd3, 0x6a, 0xc8, 0x4c, 0xb9, 0x12, 0x59, 0x81, 0x36,
	0x4a, 0x72, 0xff, 0x94, 0xb7, 0x7c, 0x89, 0x0c, 0x18, 0x3e, 0xe5, 0xb7, 0x09, 0x99, 0xa4, 0x79,
	0x08, 0x6c, 0x71, 0x9c, 0xe1, 0xf8, 0xaf, 0x88, 0xd9, 0x82, 0x77, 0x93, 0x8e, 0x7b, 0x09, 0x83,
	0x55, 0x7d, 0x2e, 0xbe, 0x81, 0x2c, 0xde, 0x49, 0xda, 0x74, 0x10, 0xe6, 0xc7, 0x85, 0x7d, 0xfe,
	0x82, 0xc2, 0x7e, 0x97, 0x5c, 0xcb, 0x78, 0x02, 0x7d, 0xa5, 0xce, 0xdc, 0xae, 0x16, 0x30, 0x05,
	0x48, 0x03, 0x75, 0x53, 0x37, 0xcb, 0x58, 0x80, 0xe1, 0xfb, 0x5f, 0xbc, 0x76, 0x03, 0x62, 0xfc,
	0xcf, 0xc8, 0xed, 0xa9, 0xc6, 0x47, 0x2a, 0x2b, 0xb2, 0x91, 0xeb, 0xd7, 0x42, 0x03, 0x62, 0xb0,
	0x20, 0x2e, 0xc4, 0xdb, 0x13, 0xd1, 0x31, 0x6a, 0x8e, 0x27, 0x92, 0xe8, 0x90, 0x7c, 0x36, 0x35,
	0xc7, 0x8f, 0x3a, 0x1b, 0x16, 0x5a, 0x9b, 0x65, 0x5c, 0xfe, 0xee, 0x44, 0x7a, 0x34, 0xdb, 0xe4,
	0x74, 0x7c, 0x93, 0x73, 0x9f, 0xac, 0x0a, 0xc3, 0xaa, 0x81, 0xf2, 0x3f, 0xa7, 0xae, 0xad, 0x4d,
	0xe9, 0x0a, 0x46, 0xb1, 0x2c, 0xcc, 0x89, 0xc3, 0xdf, 0x06, 0x38, 0xda, 0x23, 0x2b, 0x53, 0x5d,
	0x89, 0xb1, 0xae, 0x00, 0xad, 0xe2, 0x59, 0x5d, 0x1f, 0xb7, 0x25, 0x3d, 0x87, 0x46, 0xdf, 0x90,
	0x1b, 0xe3, 0x59, 0x43, 0x0f, 0x3d, 0x12, 0x32, 0xa7, 0x11, 0x4e, 0x1c, 0x85, 0x89, 0xbb, 0x13,
	0x06, 0x5f, 0xf9, 0x66, 0x84, 0x6b, 0x53, 0x5d, 0xad, 0xd5, 0x80, 0x11, 0x8d, 0xe8, 0x9a, 0xaf,
	0x1d, 0x61, 0xd8, 0xb1, 0xa7, 0xe3, 0xc0, 0x3e, 0x9b, 0x7b, 0xd9, 0xfa, 0x57, 0xeb, 0x17, 0xff,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x1a, 0x95, 0xac, 0x3a, 0x11, 0x00, 0x00,
}
