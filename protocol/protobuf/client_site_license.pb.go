// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_sitelicenseclient.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package protobuf is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package protobuf to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CMsgClientSiteInfo struct {
	SiteId           *uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	SiteName         *string `protobuf:"bytes,2,opt,name=site_name,json=siteName" json:"site_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientSiteInfo) Reset()                    { *m = CMsgClientSiteInfo{} }
func (m *CMsgClientSiteInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientSiteInfo) ProtoMessage()               {}
func (*CMsgClientSiteInfo) Descriptor() ([]byte, []int) { return client_site_license_fileDescriptor0, []int{0} }

func (m *CMsgClientSiteInfo) GetSiteId() uint64 {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return 0
}

func (m *CMsgClientSiteInfo) GetSiteName() string {
	if m != nil && m.SiteName != nil {
		return *m.SiteName
	}
	return ""
}

type CMsgClientSiteLicenseCheckout struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientSiteLicenseCheckout) Reset()                    { *m = CMsgClientSiteLicenseCheckout{} }
func (m *CMsgClientSiteLicenseCheckout) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientSiteLicenseCheckout) ProtoMessage()               {}
func (*CMsgClientSiteLicenseCheckout) Descriptor() ([]byte, []int) { return client_site_license_fileDescriptor0, []int{1} }

func (m *CMsgClientSiteLicenseCheckout) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CMsgClientSiteLicenseCheckoutResponse struct {
	Eresult          *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClientSiteLicenseCheckoutResponse) Reset()         { *m = CMsgClientSiteLicenseCheckoutResponse{} }
func (m *CMsgClientSiteLicenseCheckoutResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgClientSiteLicenseCheckoutResponse) ProtoMessage()    {}
func (*CMsgClientSiteLicenseCheckoutResponse) Descriptor() ([]byte, []int) {
	return client_site_license_fileDescriptor0, []int{2}
}

const Default_CMsgClientSiteLicenseCheckoutResponse_Eresult int32 = 2

func (m *CMsgClientSiteLicenseCheckoutResponse) GetEresult() int32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgClientSiteLicenseCheckoutResponse_Eresult
}

type CMsgClientSiteLicenseGetAvailableSeats struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientSiteLicenseGetAvailableSeats) Reset() {
	*m = CMsgClientSiteLicenseGetAvailableSeats{}
}
func (m *CMsgClientSiteLicenseGetAvailableSeats) String() string { return proto.CompactTextString(m) }
func (*CMsgClientSiteLicenseGetAvailableSeats) ProtoMessage()    {}
func (*CMsgClientSiteLicenseGetAvailableSeats) Descriptor() ([]byte, []int) {
	return client_site_license_fileDescriptor0, []int{3}
}

func (m *CMsgClientSiteLicenseGetAvailableSeats) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CMsgClientSiteLicenseGetAvailableSeatsResponse struct {
	Eresult          *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Seats            *uint32 `protobuf:"varint,2,opt,name=seats" json:"seats,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientSiteLicenseGetAvailableSeatsResponse) Reset() {
	*m = CMsgClientSiteLicenseGetAvailableSeatsResponse{}
}
func (m *CMsgClientSiteLicenseGetAvailableSeatsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientSiteLicenseGetAvailableSeatsResponse) ProtoMessage() {}
func (*CMsgClientSiteLicenseGetAvailableSeatsResponse) Descriptor() ([]byte, []int) {
	return client_site_license_fileDescriptor0, []int{4}
}

const Default_CMsgClientSiteLicenseGetAvailableSeatsResponse_Eresult int32 = 2

func (m *CMsgClientSiteLicenseGetAvailableSeatsResponse) GetEresult() int32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgClientSiteLicenseGetAvailableSeatsResponse_Eresult
}

func (m *CMsgClientSiteLicenseGetAvailableSeatsResponse) GetSeats() uint32 {
	if m != nil && m.Seats != nil {
		return *m.Seats
	}
	return 0
}

type CMsgClientSiteLicenseGetContentCacheInfo struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClientSiteLicenseGetContentCacheInfo) Reset() {
	*m = CMsgClientSiteLicenseGetContentCacheInfo{}
}
func (m *CMsgClientSiteLicenseGetContentCacheInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgClientSiteLicenseGetContentCacheInfo) ProtoMessage()    {}
func (*CMsgClientSiteLicenseGetContentCacheInfo) Descriptor() ([]byte, []int) {
	return client_site_license_fileDescriptor0, []int{5}
}

type CMsgClientSiteLicenseGetContentCacheInfoResponse struct {
	UseCache         *bool   `protobuf:"varint,1,opt,name=use_cache,json=useCache" json:"use_cache,omitempty"`
	Ipv4Address      *uint32 `protobuf:"varint,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	PortNumber       *uint32 `protobuf:"varint,3,opt,name=port_number,json=portNumber" json:"port_number,omitempty"`
	P2PGroup         *uint32 `protobuf:"varint,4,opt,name=p2p_group,json=p2pGroup" json:"p2p_group,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientSiteLicenseGetContentCacheInfoResponse) Reset() {
	*m = CMsgClientSiteLicenseGetContentCacheInfoResponse{}
}
func (m *CMsgClientSiteLicenseGetContentCacheInfoResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientSiteLicenseGetContentCacheInfoResponse) ProtoMessage() {}
func (*CMsgClientSiteLicenseGetContentCacheInfoResponse) Descriptor() ([]byte, []int) {
	return client_site_license_fileDescriptor0, []int{6}
}

func (m *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetUseCache() bool {
	if m != nil && m.UseCache != nil {
		return *m.UseCache
	}
	return false
}

func (m *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetIpv4Address() uint32 {
	if m != nil && m.Ipv4Address != nil {
		return *m.Ipv4Address
	}
	return 0
}

func (m *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetPortNumber() uint32 {
	if m != nil && m.PortNumber != nil {
		return *m.PortNumber
	}
	return 0
}

func (m *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetP2PGroup() uint32 {
	if m != nil && m.P2PGroup != nil {
		return *m.P2PGroup
	}
	return 0
}

func init() {
	proto.RegisterType((*CMsgClientSiteInfo)(nil), "CMsgClientSiteInfo")
	proto.RegisterType((*CMsgClientSiteLicenseCheckout)(nil), "CMsgClientSiteLicenseCheckout")
	proto.RegisterType((*CMsgClientSiteLicenseCheckoutResponse)(nil), "CMsgClientSiteLicenseCheckoutResponse")
	proto.RegisterType((*CMsgClientSiteLicenseGetAvailableSeats)(nil), "CMsgClientSiteLicenseGetAvailableSeats")
	proto.RegisterType((*CMsgClientSiteLicenseGetAvailableSeatsResponse)(nil), "CMsgClientSiteLicenseGetAvailableSeatsResponse")
	proto.RegisterType((*CMsgClientSiteLicenseGetContentCacheInfo)(nil), "CMsgClientSiteLicenseGetContentCacheInfo")
	proto.RegisterType((*CMsgClientSiteLicenseGetContentCacheInfoResponse)(nil), "CMsgClientSiteLicenseGetContentCacheInfoResponse")
}

func init() { proto.RegisterFile("steammessages_sitelicenseclient.proto", client_site_license_fileDescriptor0) }

var client_site_license_fileDescriptor0 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x7d, 0x79, 0xaf, 0x7d, 0x4d, 0x6f, 0x5f, 0x37, 0xe1, 0x81, 0xc1, 0x22, 0xd6, 0x40, 0xa5,
	0xb8, 0x28, 0x52, 0x74, 0xe3, 0x42, 0xa8, 0x11, 0x6a, 0x45, 0xbb, 0x98, 0xfe, 0x80, 0x30, 0x4d,
	0xae, 0xed, 0x60, 0x32, 0x33, 0xe4, 0x4e, 0xba, 0xf6, 0x27, 0xf9, 0x13, 0x65, 0x26, 0x16, 0x2c,
	0x58, 0xe9, 0xf2, 0x7c, 0xdc, 0x73, 0x0e, 0x33, 0x30, 0x20, 0x83, 0xbc, 0x28, 0x90, 0x88, 0xaf,
	0x90, 0x12, 0x12, 0x06, 0x73, 0x91, 0xa2, 0x24, 0x4c, 0x73, 0x81, 0xd2, 0x8c, 0x74, 0xa9, 0x8c,
	0x3a, 0x0e, 0x77, 0x6d, 0x4b, 0x4e, 0x58, 0x2b, 0xd1, 0x23, 0x04, 0xf1, 0x33, 0xad, 0x62, 0xe7,
	0x5e, 0x08, 0x83, 0x33, 0xf9, 0xa2, 0x82, 0x23, 0x68, 0xd9, 0xa8, 0x44, 0x64, 0xa1, 0xd7, 0xf7,
	0x86, 0x0d, 0xf6, 0xd7, 0xc2, 0x59, 0x16, 0xf4, 0xa0, 0xed, 0x04, 0xc9, 0x0b, 0x0c, 0x7f, 0xf7,
	0xbd, 0x61, 0x9b, 0xf9, 0x96, 0x98, 0xf3, 0x02, 0xa3, 0x6b, 0x38, 0xd9, 0xcd, 0x7a, 0xaa, 0xa7,
	0xc4, 0x6b, 0x4c, 0x5f, 0x55, 0x65, 0x82, 0xff, 0xd0, 0xe4, 0x5a, 0x7f, 0x86, 0x76, 0x59, 0x0d,
	0xa2, 0x7b, 0x18, 0xfc, 0x78, 0xc6, 0x90, 0xb4, 0x92, 0x84, 0x41, 0x0f, 0x5a, 0x58, 0x22, 0x55,
	0xb9, 0x71, 0x01, 0xcd, 0x1b, 0x6f, 0xcc, 0xb6, 0x4c, 0x74, 0x0b, 0xe7, 0xdf, 0xa6, 0x4c, 0xd1,
	0x4c, 0x36, 0x5c, 0xe4, 0x7c, 0x99, 0xe3, 0x02, 0xb9, 0xa1, 0x3d, 0x2b, 0x52, 0x18, 0x1d, 0x76,
	0x7f, 0xd0, 0x1c, 0x5b, 0x42, 0xd6, 0xed, 0x1e, 0xa9, 0xcb, 0x6a, 0x10, 0x5d, 0xc0, 0x70, 0x5f,
	0x49, 0xac, 0xa4, 0x41, 0x69, 0x62, 0x9e, 0xae, 0xdd, 0x1f, 0x44, 0xef, 0x1e, 0x5c, 0x1e, 0x6a,
	0xfe, 0xb2, 0xa9, 0x5d, 0x11, 0x26, 0xa9, 0x15, 0xdc, 0x2a, 0x9f, 0xf9, 0x15, 0xa1, 0x33, 0x06,
	0x67, 0xf0, 0x4f, 0xe8, 0xcd, 0x55, 0xc2, 0xb3, 0xac, 0x44, 0xda, 0x4e, 0xeb, 0x58, 0x6e, 0x52,
	0x53, 0xc1, 0x29, 0x74, 0xb4, 0x2a, 0x4d, 0x22, 0xab, 0x62, 0x89, 0x65, 0xf8, 0xc7, 0x39, 0xc0,
	0x52, 0x73, 0xc7, 0xd8, 0x02, 0x3d, 0xd6, 0xc9, 0xaa, 0x54, 0x95, 0x0e, 0x1b, 0x4e, 0xf6, 0xf5,
	0x58, 0x4f, 0x2d, 0xbe, 0x6b, 0x3e, 0x78, 0x6f, 0xde, 0xaf, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf7, 0x75, 0x24, 0x97, 0x95, 0x02, 0x00, 0x00,
}
