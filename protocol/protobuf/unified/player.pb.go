// Code generated by protoc-gen-go.
// source: steammessages_player.steamclient.proto
// DO NOT EDIT!

package unified

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package unified is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package unified to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CPlayer_GetGameBadgeLevels_Request struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CPlayer_GetGameBadgeLevels_Request) Reset()         { *m = CPlayer_GetGameBadgeLevels_Request{} }
func (m *CPlayer_GetGameBadgeLevels_Request) String() string { return proto.CompactTextString(m) }
func (*CPlayer_GetGameBadgeLevels_Request) ProtoMessage()    {}
func (*CPlayer_GetGameBadgeLevels_Request) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{0}
}

func (m *CPlayer_GetGameBadgeLevels_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CPlayer_GetGameBadgeLevels_Response struct {
	PlayerLevel      *uint32                                      `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	Badges           []*CPlayer_GetGameBadgeLevels_Response_Badge `protobuf:"bytes,2,rep,name=badges" json:"badges,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *CPlayer_GetGameBadgeLevels_Response) Reset()         { *m = CPlayer_GetGameBadgeLevels_Response{} }
func (m *CPlayer_GetGameBadgeLevels_Response) String() string { return proto.CompactTextString(m) }
func (*CPlayer_GetGameBadgeLevels_Response) ProtoMessage()    {}
func (*CPlayer_GetGameBadgeLevels_Response) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{1}
}

func (m *CPlayer_GetGameBadgeLevels_Response) GetPlayerLevel() uint32 {
	if m != nil && m.PlayerLevel != nil {
		return *m.PlayerLevel
	}
	return 0
}

func (m *CPlayer_GetGameBadgeLevels_Response) GetBadges() []*CPlayer_GetGameBadgeLevels_Response_Badge {
	if m != nil {
		return m.Badges
	}
	return nil
}

type CPlayer_GetGameBadgeLevels_Response_Badge struct {
	Level            *int32  `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Series           *int32  `protobuf:"varint,2,opt,name=series" json:"series,omitempty"`
	BorderColor      *uint32 `protobuf:"varint,3,opt,name=border_color,json=borderColor" json:"border_color,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CPlayer_GetGameBadgeLevels_Response_Badge) Reset() {
	*m = CPlayer_GetGameBadgeLevels_Response_Badge{}
}
func (m *CPlayer_GetGameBadgeLevels_Response_Badge) String() string { return proto.CompactTextString(m) }
func (*CPlayer_GetGameBadgeLevels_Response_Badge) ProtoMessage()    {}
func (*CPlayer_GetGameBadgeLevels_Response_Badge) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{1, 0}
}

func (m *CPlayer_GetGameBadgeLevels_Response_Badge) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CPlayer_GetGameBadgeLevels_Response_Badge) GetSeries() int32 {
	if m != nil && m.Series != nil {
		return *m.Series
	}
	return 0
}

func (m *CPlayer_GetGameBadgeLevels_Response_Badge) GetBorderColor() uint32 {
	if m != nil && m.BorderColor != nil {
		return *m.BorderColor
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Request struct {
	MinLastPlayed    *uint32 `protobuf:"varint,1,opt,name=min_last_played,json=minLastPlayed" json:"min_last_played,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CPlayer_GetLastPlayedTimes_Request) Reset()         { *m = CPlayer_GetLastPlayedTimes_Request{} }
func (m *CPlayer_GetLastPlayedTimes_Request) String() string { return proto.CompactTextString(m) }
func (*CPlayer_GetLastPlayedTimes_Request) ProtoMessage()    {}
func (*CPlayer_GetLastPlayedTimes_Request) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{2}
}

func (m *CPlayer_GetLastPlayedTimes_Request) GetMinLastPlayed() uint32 {
	if m != nil && m.MinLastPlayed != nil {
		return *m.MinLastPlayed
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response struct {
	Games            []*CPlayer_GetLastPlayedTimes_Response_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CPlayer_GetLastPlayedTimes_Response) Reset()         { *m = CPlayer_GetLastPlayedTimes_Response{} }
func (m *CPlayer_GetLastPlayedTimes_Response) String() string { return proto.CompactTextString(m) }
func (*CPlayer_GetLastPlayedTimes_Response) ProtoMessage()    {}
func (*CPlayer_GetLastPlayedTimes_Response) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{3}
}

func (m *CPlayer_GetLastPlayedTimes_Response) GetGames() []*CPlayer_GetLastPlayedTimes_Response_Game {
	if m != nil {
		return m.Games
	}
	return nil
}

type CPlayer_GetLastPlayedTimes_Response_Game struct {
	Appid            *int32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LastPlaytime     *uint32 `protobuf:"varint,2,opt,name=last_playtime,json=lastPlaytime" json:"last_playtime,omitempty"`
	Playtime_2Weeks  *int32  `protobuf:"varint,3,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	PlaytimeForever  *int32  `protobuf:"varint,4,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CPlayer_GetLastPlayedTimes_Response_Game) Reset() {
	*m = CPlayer_GetLastPlayedTimes_Response_Game{}
}
func (m *CPlayer_GetLastPlayedTimes_Response_Game) String() string { return proto.CompactTextString(m) }
func (*CPlayer_GetLastPlayedTimes_Response_Game) ProtoMessage()    {}
func (*CPlayer_GetLastPlayedTimes_Response_Game) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{3, 0}
}

func (m *CPlayer_GetLastPlayedTimes_Response_Game) GetAppid() int32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CPlayer_GetLastPlayedTimes_Response_Game) GetLastPlaytime() uint32 {
	if m != nil && m.LastPlaytime != nil {
		return *m.LastPlaytime
	}
	return 0
}

func (m *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytime_2Weeks() int32 {
	if m != nil && m.Playtime_2Weeks != nil {
		return *m.Playtime_2Weeks
	}
	return 0
}

func (m *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeForever() int32 {
	if m != nil && m.PlaytimeForever != nil {
		return *m.PlaytimeForever
	}
	return 0
}

type CPlayer_AcceptSSA_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CPlayer_AcceptSSA_Request) Reset()                    { *m = CPlayer_AcceptSSA_Request{} }
func (m *CPlayer_AcceptSSA_Request) String() string            { return proto.CompactTextString(m) }
func (*CPlayer_AcceptSSA_Request) ProtoMessage()               {}
func (*CPlayer_AcceptSSA_Request) Descriptor() ([]byte, []int) { return player_fileDescriptor0, []int{4} }

type CPlayer_AcceptSSA_Response struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CPlayer_AcceptSSA_Response) Reset()                    { *m = CPlayer_AcceptSSA_Response{} }
func (m *CPlayer_AcceptSSA_Response) String() string            { return proto.CompactTextString(m) }
func (*CPlayer_AcceptSSA_Response) ProtoMessage()               {}
func (*CPlayer_AcceptSSA_Response) Descriptor() ([]byte, []int) { return player_fileDescriptor0, []int{5} }

type CPlayer_LastPlayedTimes_Notification struct {
	Games            []*CPlayer_GetLastPlayedTimes_Response_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CPlayer_LastPlayedTimes_Notification) Reset()         { *m = CPlayer_LastPlayedTimes_Notification{} }
func (m *CPlayer_LastPlayedTimes_Notification) String() string { return proto.CompactTextString(m) }
func (*CPlayer_LastPlayedTimes_Notification) ProtoMessage()    {}
func (*CPlayer_LastPlayedTimes_Notification) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{6}
}

func (m *CPlayer_LastPlayedTimes_Notification) GetGames() []*CPlayer_GetLastPlayedTimes_Response_Game {
	if m != nil {
		return m.Games
	}
	return nil
}

type CPlayerClient_GetSystemInformation_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CPlayerClient_GetSystemInformation_Request) Reset() {
	*m = CPlayerClient_GetSystemInformation_Request{}
}
func (m *CPlayerClient_GetSystemInformation_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CPlayerClient_GetSystemInformation_Request) ProtoMessage() {}
func (*CPlayerClient_GetSystemInformation_Request) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{7}
}

type CClientSystemInfo struct {
	Cpu                *CClientSystemInfo_CPU       `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	VideoCard          *CClientSystemInfo_VideoCard `protobuf:"bytes,2,opt,name=video_card,json=videoCard" json:"video_card,omitempty"`
	OperatingSystem    *string                      `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	Os_64Bit           *bool                        `protobuf:"varint,4,opt,name=os_64bit,json=os64bit" json:"os_64bit,omitempty"`
	SystemRamMb        *int32                       `protobuf:"varint,5,opt,name=system_ram_mb,json=systemRamMb" json:"system_ram_mb,omitempty"`
	AudioDevice        *string                      `protobuf:"bytes,6,opt,name=audio_device,json=audioDevice" json:"audio_device,omitempty"`
	AudioDriverVersion *string                      `protobuf:"bytes,7,opt,name=audio_driver_version,json=audioDriverVersion" json:"audio_driver_version,omitempty"`
	XXX_unrecognized   []byte                       `json:"-"`
}

func (m *CClientSystemInfo) Reset()                    { *m = CClientSystemInfo{} }
func (m *CClientSystemInfo) String() string            { return proto.CompactTextString(m) }
func (*CClientSystemInfo) ProtoMessage()               {}
func (*CClientSystemInfo) Descriptor() ([]byte, []int) { return player_fileDescriptor0, []int{8} }

func (m *CClientSystemInfo) GetCpu() *CClientSystemInfo_CPU {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *CClientSystemInfo) GetVideoCard() *CClientSystemInfo_VideoCard {
	if m != nil {
		return m.VideoCard
	}
	return nil
}

func (m *CClientSystemInfo) GetOperatingSystem() string {
	if m != nil && m.OperatingSystem != nil {
		return *m.OperatingSystem
	}
	return ""
}

func (m *CClientSystemInfo) GetOs_64Bit() bool {
	if m != nil && m.Os_64Bit != nil {
		return *m.Os_64Bit
	}
	return false
}

func (m *CClientSystemInfo) GetSystemRamMb() int32 {
	if m != nil && m.SystemRamMb != nil {
		return *m.SystemRamMb
	}
	return 0
}

func (m *CClientSystemInfo) GetAudioDevice() string {
	if m != nil && m.AudioDevice != nil {
		return *m.AudioDevice
	}
	return ""
}

func (m *CClientSystemInfo) GetAudioDriverVersion() string {
	if m != nil && m.AudioDriverVersion != nil {
		return *m.AudioDriverVersion
	}
	return ""
}

type CClientSystemInfo_CPU struct {
	SpeedMhz           *int32  `protobuf:"varint,1,opt,name=speed_mhz,json=speedMhz" json:"speed_mhz,omitempty"`
	Vendor             *string `protobuf:"bytes,2,opt,name=vendor" json:"vendor,omitempty"`
	LogicalProcessors  *int32  `protobuf:"varint,3,opt,name=logical_processors,json=logicalProcessors" json:"logical_processors,omitempty"`
	PhysicalProcessors *int32  `protobuf:"varint,4,opt,name=physical_processors,json=physicalProcessors" json:"physical_processors,omitempty"`
	Hyperthreading     *bool   `protobuf:"varint,5,opt,name=hyperthreading" json:"hyperthreading,omitempty"`
	Fcmov              *bool   `protobuf:"varint,6,opt,name=fcmov" json:"fcmov,omitempty"`
	Sse2               *bool   `protobuf:"varint,7,opt,name=sse2" json:"sse2,omitempty"`
	Sse3               *bool   `protobuf:"varint,8,opt,name=sse3" json:"sse3,omitempty"`
	Ssse3              *bool   `protobuf:"varint,9,opt,name=ssse3" json:"ssse3,omitempty"`
	Sse4A              *bool   `protobuf:"varint,10,opt,name=sse4a" json:"sse4a,omitempty"`
	Sse41              *bool   `protobuf:"varint,11,opt,name=sse41" json:"sse41,omitempty"`
	Sse42              *bool   `protobuf:"varint,12,opt,name=sse42" json:"sse42,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *CClientSystemInfo_CPU) Reset()                    { *m = CClientSystemInfo_CPU{} }
func (m *CClientSystemInfo_CPU) String() string            { return proto.CompactTextString(m) }
func (*CClientSystemInfo_CPU) ProtoMessage()               {}
func (*CClientSystemInfo_CPU) Descriptor() ([]byte, []int) { return player_fileDescriptor0, []int{8, 0} }

func (m *CClientSystemInfo_CPU) GetSpeedMhz() int32 {
	if m != nil && m.SpeedMhz != nil {
		return *m.SpeedMhz
	}
	return 0
}

func (m *CClientSystemInfo_CPU) GetVendor() string {
	if m != nil && m.Vendor != nil {
		return *m.Vendor
	}
	return ""
}

func (m *CClientSystemInfo_CPU) GetLogicalProcessors() int32 {
	if m != nil && m.LogicalProcessors != nil {
		return *m.LogicalProcessors
	}
	return 0
}

func (m *CClientSystemInfo_CPU) GetPhysicalProcessors() int32 {
	if m != nil && m.PhysicalProcessors != nil {
		return *m.PhysicalProcessors
	}
	return 0
}

func (m *CClientSystemInfo_CPU) GetHyperthreading() bool {
	if m != nil && m.Hyperthreading != nil {
		return *m.Hyperthreading
	}
	return false
}

func (m *CClientSystemInfo_CPU) GetFcmov() bool {
	if m != nil && m.Fcmov != nil {
		return *m.Fcmov
	}
	return false
}

func (m *CClientSystemInfo_CPU) GetSse2() bool {
	if m != nil && m.Sse2 != nil {
		return *m.Sse2
	}
	return false
}

func (m *CClientSystemInfo_CPU) GetSse3() bool {
	if m != nil && m.Sse3 != nil {
		return *m.Sse3
	}
	return false
}

func (m *CClientSystemInfo_CPU) GetSsse3() bool {
	if m != nil && m.Ssse3 != nil {
		return *m.Ssse3
	}
	return false
}

func (m *CClientSystemInfo_CPU) GetSse4A() bool {
	if m != nil && m.Sse4A != nil {
		return *m.Sse4A
	}
	return false
}

func (m *CClientSystemInfo_CPU) GetSse41() bool {
	if m != nil && m.Sse41 != nil {
		return *m.Sse41
	}
	return false
}

func (m *CClientSystemInfo_CPU) GetSse42() bool {
	if m != nil && m.Sse42 != nil {
		return *m.Sse42
	}
	return false
}

type CClientSystemInfo_VideoCard struct {
	Driver           *string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	DriverVersion    *string `protobuf:"bytes,2,opt,name=driver_version,json=driverVersion" json:"driver_version,omitempty"`
	DriverDate       *uint32 `protobuf:"varint,3,opt,name=driver_date,json=driverDate" json:"driver_date,omitempty"`
	DirectxVersion   *string `protobuf:"bytes,4,opt,name=directx_version,json=directxVersion" json:"directx_version,omitempty"`
	OpenglVersion    *string `protobuf:"bytes,5,opt,name=opengl_version,json=openglVersion" json:"opengl_version,omitempty"`
	Vendorid         *int32  `protobuf:"varint,6,opt,name=vendorid" json:"vendorid,omitempty"`
	Deviceid         *int32  `protobuf:"varint,7,opt,name=deviceid" json:"deviceid,omitempty"`
	VramMb           *int32  `protobuf:"varint,8,opt,name=vram_mb,json=vramMb" json:"vram_mb,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CClientSystemInfo_VideoCard) Reset()                    { *m = CClientSystemInfo_VideoCard{} }
func (m *CClientSystemInfo_VideoCard) String() string            { return proto.CompactTextString(m) }
func (*CClientSystemInfo_VideoCard) ProtoMessage()               {}
func (*CClientSystemInfo_VideoCard) Descriptor() ([]byte, []int) { return player_fileDescriptor0, []int{8, 1} }

func (m *CClientSystemInfo_VideoCard) GetDriver() string {
	if m != nil && m.Driver != nil {
		return *m.Driver
	}
	return ""
}

func (m *CClientSystemInfo_VideoCard) GetDriverVersion() string {
	if m != nil && m.DriverVersion != nil {
		return *m.DriverVersion
	}
	return ""
}

func (m *CClientSystemInfo_VideoCard) GetDriverDate() uint32 {
	if m != nil && m.DriverDate != nil {
		return *m.DriverDate
	}
	return 0
}

func (m *CClientSystemInfo_VideoCard) GetDirectxVersion() string {
	if m != nil && m.DirectxVersion != nil {
		return *m.DirectxVersion
	}
	return ""
}

func (m *CClientSystemInfo_VideoCard) GetOpenglVersion() string {
	if m != nil && m.OpenglVersion != nil {
		return *m.OpenglVersion
	}
	return ""
}

func (m *CClientSystemInfo_VideoCard) GetVendorid() int32 {
	if m != nil && m.Vendorid != nil {
		return *m.Vendorid
	}
	return 0
}

func (m *CClientSystemInfo_VideoCard) GetDeviceid() int32 {
	if m != nil && m.Deviceid != nil {
		return *m.Deviceid
	}
	return 0
}

func (m *CClientSystemInfo_VideoCard) GetVramMb() int32 {
	if m != nil && m.VramMb != nil {
		return *m.VramMb
	}
	return 0
}

type CPlayerClient_GetSystemInformation_Response struct {
	SystemInfo       *CClientSystemInfo `protobuf:"bytes,1,opt,name=system_info,json=systemInfo" json:"system_info,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CPlayerClient_GetSystemInformation_Response) Reset() {
	*m = CPlayerClient_GetSystemInformation_Response{}
}
func (m *CPlayerClient_GetSystemInformation_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CPlayerClient_GetSystemInformation_Response) ProtoMessage() {}
func (*CPlayerClient_GetSystemInformation_Response) Descriptor() ([]byte, []int) {
	return player_fileDescriptor0, []int{9}
}

func (m *CPlayerClient_GetSystemInformation_Response) GetSystemInfo() *CClientSystemInfo {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*CPlayer_GetGameBadgeLevels_Request)(nil), "CPlayer_GetGameBadgeLevels_Request")
	proto.RegisterType((*CPlayer_GetGameBadgeLevels_Response)(nil), "CPlayer_GetGameBadgeLevels_Response")
	proto.RegisterType((*CPlayer_GetGameBadgeLevels_Response_Badge)(nil), "CPlayer_GetGameBadgeLevels_Response.Badge")
	proto.RegisterType((*CPlayer_GetLastPlayedTimes_Request)(nil), "CPlayer_GetLastPlayedTimes_Request")
	proto.RegisterType((*CPlayer_GetLastPlayedTimes_Response)(nil), "CPlayer_GetLastPlayedTimes_Response")
	proto.RegisterType((*CPlayer_GetLastPlayedTimes_Response_Game)(nil), "CPlayer_GetLastPlayedTimes_Response.Game")
	proto.RegisterType((*CPlayer_AcceptSSA_Request)(nil), "CPlayer_AcceptSSA_Request")
	proto.RegisterType((*CPlayer_AcceptSSA_Response)(nil), "CPlayer_AcceptSSA_Response")
	proto.RegisterType((*CPlayer_LastPlayedTimes_Notification)(nil), "CPlayer_LastPlayedTimes_Notification")
	proto.RegisterType((*CPlayerClient_GetSystemInformation_Request)(nil), "CPlayerClient_GetSystemInformation_Request")
	proto.RegisterType((*CClientSystemInfo)(nil), "CClientSystemInfo")
	proto.RegisterType((*CClientSystemInfo_CPU)(nil), "CClientSystemInfo.CPU")
	proto.RegisterType((*CClientSystemInfo_VideoCard)(nil), "CClientSystemInfo.VideoCard")
	proto.RegisterType((*CPlayerClient_GetSystemInformation_Response)(nil), "CPlayerClient_GetSystemInformation_Response")
}

func init() { proto.RegisterFile("steammessages_player.steamclient.proto", player_fileDescriptor0) }

var player_fileDescriptor0 = []byte{
	// 1238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x86, 0x2c, 0xcb, 0x96, 0x46, 0x96, 0xd3, 0x6c, 0xd3, 0x94, 0x61, 0x52, 0x74, 0xcb, 0xfc,
	0x27, 0x0e, 0xdb, 0x28, 0x41, 0x0f, 0xcd, 0xc1, 0xb0, 0x15, 0x34, 0x28, 0x60, 0x07, 0x2e, 0x1d,
	0x07, 0xbd, 0x11, 0x14, 0xb9, 0x92, 0x08, 0x93, 0x5c, 0x95, 0x4b, 0x29, 0x55, 0x4e, 0x45, 0xcf,
	0xb9, 0x14, 0x45, 0x9f, 0xa0, 0xcf, 0x90, 0x9e, 0x0b, 0xf4, 0x25, 0xfa, 0x04, 0xbd, 0xf5, 0x15,
	0x8a, 0xce, 0xee, 0x92, 0xd4, 0x9f, 0x9d, 0xaa, 0xe8, 0x41, 0x80, 0xf6, 0x9b, 0x6f, 0x67, 0x67,
	0xbf, 0x99, 0xd9, 0x21, 0xdc, 0x12, 0x19, 0xf3, 0xe2, 0x98, 0x09, 0xe1, 0xf5, 0x99, 0x70, 0x87,
	0x91, 0x37, 0x61, 0xa9, 0xad, 0x40, 0x3f, 0x0a, 0x59, 0x92, 0xd9, 0xc3, 0x94, 0x67, 0xdc, 0xdc,
	0x99, 0xe7, 0x8d, 0x92, 0xb0, 0x17, 0xb2, 0xc0, 0xed, 0x7a, 0x82, 0x2d, 0xb3, 0xad, 0x2f, 0xc0,
	0xea, 0x1c, 0x29, 0x57, 0xee, 0x33, 0x96, 0x3d, 0xf3, 0x62, 0xb6, 0xef, 0x05, 0x7d, 0x76, 0xc0,
	0xc6, 0x2c, 0x12, 0xae, 0xc3, 0xbe, 0x1d, 0x31, 0x91, 0x91, 0x4b, 0x50, 0xf3, 0x86, 0xc3, 0x30,
	0x30, 0x2a, 0xb4, 0x72, 0xa7, 0xe5, 0xe8, 0x85, 0xf5, 0x67, 0x05, 0xae, 0xbf, 0x73, 0xb3, 0x18,
	0xf2, 0x44, 0x30, 0xf2, 0x09, 0x6c, 0xe9, 0x68, 0xdd, 0x48, 0x5a, 0x72, 0x27, 0x4d, 0x8d, 0x29,
	0x32, 0xd9, 0x87, 0x8d, 0xae, 0xdc, 0x2a, 0x8c, 0x35, 0x5a, 0xbd, 0xd3, 0x6c, 0xdf, 0xb3, 0x57,
	0x70, 0x6c, 0x2b, 0xd0, 0xc9, 0x77, 0x9a, 0xdf, 0x40, 0x4d, 0x01, 0x32, 0xda, 0xe9, 0x41, 0x35,
	0x47, 0x2f, 0xc8, 0x65, 0xd8, 0x10, 0x2c, 0x0d, 0xd5, 0x11, 0x12, 0xce, 0x57, 0x32, 0xba, 0x2e,
	0x4f, 0x03, 0x3c, 0xca, 0xe7, 0x11, 0x4f, 0x8d, 0xaa, 0x8e, 0x4e, 0x63, 0x1d, 0x09, 0x59, 0x3f,
	0x56, 0xe6, 0x54, 0x3a, 0xf0, 0x44, 0xa6, 0x56, 0xc1, 0x8b, 0x10, 0x75, 0x2e, 0x55, 0x3a, 0x85,
	0x0b, 0x71, 0x98, 0xb8, 0x11, 0x9a, 0x75, 0x7a, 0x72, 0xbd, 0xf6, 0x3b, 0x3f, 0xbc, 0x35, 0x76,
	0x5f, 0x0c, 0x18, 0x8d, 0xb9, 0xc8, 0x68, 0xca, 0x7c, 0xd4, 0x9f, 0x4a, 0xda, 0x03, 0x4d, 0xa3,
	0x19, 0xfa, 0xa1, 0x19, 0x12, 0x74, 0x6e, 0xa8, 0x17, 0xa5, 0xcc, 0x0b, 0x26, 0xf4, 0x34, 0xe1,
	0xaf, 0x04, 0xf5, 0xba, 0x7c, 0x94, 0x39, 0x2d, 0xf4, 0x3d, 0x3d, 0xd9, 0xfa, 0x7b, 0x5e, 0xfc,
	0xe5, 0x98, 0x72, 0xf1, 0x77, 0xa1, 0xd6, 0x47, 0xfd, 0x04, 0x86, 0x22, 0x85, 0xbd, 0x6b, 0xaf,
	0xb0, 0xc9, 0x96, 0x8a, 0x3b, 0x7a, 0x9f, 0xf9, 0x73, 0x05, 0xd6, 0xe5, 0x7a, 0xbe, 0x08, 0x6a,
	0x79, 0x11, 0x90, 0xeb, 0xd0, 0x2a, 0x2f, 0x2c, 0xaf, 0xa1, 0xd4, 0x6d, 0x39, 0x5b, 0x51, 0xee,
	0x5b, 0x62, 0xe4, 0x36, 0x5c, 0x28, 0xec, 0x6e, 0xfb, 0x15, 0x63, 0xa7, 0x42, 0xc9, 0x5c, 0x73,
	0xb6, 0x0b, 0x58, 0xa3, 0xe4, 0x2e, 0xbc, 0x57, 0x12, 0x7b, 0x3c, 0xc5, 0xc4, 0xa5, 0xc6, 0xba,
	0x62, 0x96, 0x0e, 0xbe, 0xd4, 0xb0, 0x75, 0x15, 0xae, 0x14, 0x57, 0xd9, 0xf3, 0x7d, 0x36, 0xcc,
	0x8e, 0x8f, 0xf7, 0x8a, 0x54, 0x58, 0xd7, 0xc0, 0x3c, 0xcb, 0xa8, 0xaf, 0x67, 0xf5, 0xe1, 0x46,
	0x61, 0x5d, 0x94, 0xe0, 0x39, 0xcf, 0xb0, 0x5f, 0x7c, 0x2f, 0x0b, 0x79, 0xf2, 0xbf, 0xb5, 0xb3,
	0x76, 0xe0, 0x5e, 0xbe, 0xa5, 0xa3, 0x12, 0x2b, 0x37, 0x1e, 0x4f, 0xb0, 0x0b, 0xe3, 0xaf, 0x12,
	0xbc, 0x5e, 0xac, 0x8e, 0x29, 0x83, 0xfe, 0x65, 0x13, 0x2e, 0x76, 0x34, 0x71, 0x4a, 0x22, 0x77,
	0xa0, 0xea, 0x0f, 0x47, 0x4a, 0xf4, 0x66, 0xfb, 0xb2, 0xbd, 0x44, 0xc0, 0xa0, 0x4e, 0x1c, 0x49,
	0x21, 0x4f, 0x00, 0xc6, 0x61, 0xc0, 0xb8, 0xeb, 0x7b, 0x69, 0xa0, 0xf2, 0xd0, 0x6c, 0x5f, 0x3b,
	0x63, 0xc3, 0x4b, 0x49, 0xea, 0x20, 0xc7, 0x69, 0x8c, 0x8b, 0xbf, 0x52, 0x79, 0x3e, 0x64, 0x29,
	0x46, 0x94, 0xf4, 0x5d, 0xa1, 0xc8, 0x2a, 0x47, 0x0d, 0xe7, 0x42, 0x89, 0x6b, 0x1f, 0xe4, 0x0a,
	0xd4, 0xb9, 0x70, 0x3f, 0x7f, 0xdc, 0x0d, 0x33, 0x95, 0x9c, 0xba, 0xb3, 0xc9, 0x85, 0x5a, 0x12,
	0x0b, 0x5a, 0x7a, 0xaf, 0x9b, 0x7a, 0xb1, 0x1b, 0x77, 0x8d, 0x9a, 0x4a, 0x5e, 0x53, 0x83, 0x8e,
	0x17, 0x1f, 0x76, 0x65, 0xc3, 0x79, 0xa3, 0x20, 0xe4, 0x6e, 0xc0, 0xc6, 0xa1, 0xcf, 0x8c, 0x0d,
	0x75, 0x4a, 0x53, 0x61, 0x4f, 0x15, 0x44, 0x3e, 0x83, 0x4b, 0x39, 0x25, 0x0d, 0x31, 0xd7, 0x2e,
	0xfe, 0x04, 0x2a, 0x65, 0x6c, 0x2a, 0x2a, 0xd1, 0x54, 0x65, 0x7a, 0xa9, 0x2d, 0xe6, 0x1f, 0x6b,
	0x50, 0x45, 0x21, 0xc8, 0x55, 0x68, 0x88, 0x21, 0xc3, 0xf7, 0x2e, 0x1e, 0xbc, 0xce, 0x0b, 0xb5,
	0xae, 0x80, 0xc3, 0xc1, 0x6b, 0xf9, 0x04, 0x8c, 0x59, 0x12, 0x60, 0x93, 0xaf, 0x29, 0x47, 0xf9,
	0x8a, 0x3c, 0x00, 0x12, 0xf1, 0x3e, 0x66, 0x3d, 0x72, 0xf1, 0x55, 0xf4, 0xf1, 0xe9, 0xe4, 0x69,
	0x51, 0xa1, 0x17, 0x73, 0xcb, 0x51, 0x69, 0x20, 0x9f, 0xc2, 0xfb, 0xc3, 0xc1, 0x44, 0x2c, 0xf2,
	0x75, 0x9d, 0x92, 0xc2, 0x34, 0xb3, 0xe1, 0x16, 0x6c, 0x0f, 0x26, 0x28, 0x62, 0x36, 0x90, 0x6d,
	0x8d, 0x42, 0x2a, 0x59, 0xea, 0xce, 0x02, 0x2a, 0x3b, 0xac, 0xe7, 0xc7, 0x7c, 0xac, 0x24, 0xa9,
	0x3b, 0x7a, 0x41, 0x08, 0xac, 0x0b, 0xc1, 0xda, 0xea, 0xf2, 0x75, 0x47, 0xfd, 0xcf, 0xb1, 0x47,
	0x46, 0xbd, 0xc4, 0x1e, 0xc9, 0xdd, 0x42, 0x81, 0x0d, 0xbd, 0x5b, 0x4c, 0x51, 0xf6, 0xd8, 0x33,
	0xa0, 0x40, 0x71, 0x51, 0xa0, 0x0f, 0x8d, 0xe6, 0x14, 0x7d, 0x58, 0xa0, 0x6d, 0x63, 0x6b, 0x8a,
	0xb6, 0xcd, 0x37, 0x6b, 0xd0, 0x28, 0x4b, 0x46, 0x6a, 0xa8, 0x93, 0xa2, 0xd4, 0x45, 0x0d, 0xf5,
	0x8a, 0xdc, 0x84, 0xed, 0x85, 0x64, 0x69, 0x8d, 0x5b, 0xc1, 0x6c, 0x9e, 0xc8, 0xc7, 0xd0, 0xcc,
	0x69, 0x81, 0x97, 0xb1, 0xfc, 0xb1, 0x05, 0x0d, 0x3d, 0x45, 0x44, 0x3e, 0x15, 0x41, 0x88, 0x4f,
	0x64, 0xf6, 0x5d, 0xe9, 0x68, 0x5d, 0x39, 0xda, 0xce, 0xe1, 0xc2, 0x13, 0x1e, 0x88, 0x85, 0x99,
	0xf4, 0xa3, 0x92, 0x57, 0xd3, 0x07, 0x6a, 0xb4, 0xa0, 0x99, 0x50, 0xd7, 0x59, 0xc6, 0x87, 0x6b,
	0x43, 0xd7, 0x43, 0xb1, 0x96, 0x36, 0x5d, 0x83, 0x68, 0xdb, 0xd4, 0xb6, 0x62, 0x4d, 0x3e, 0x84,
	0xcd, 0x71, 0x5e, 0xc3, 0x75, 0x3d, 0x2f, 0xe4, 0xf2, 0xb0, 0x6b, 0x75, 0xe1, 0xfe, 0x4a, 0x3d,
	0x9d, 0xbf, 0xbf, 0x8f, 0x20, 0x2f, 0x7e, 0x37, 0x44, 0x73, 0xde, 0xc6, 0x64, 0xb9, 0x2b, 0x1d,
	0x10, 0xe5, 0xff, 0xf6, 0x5f, 0x55, 0xd8, 0xd0, 0x67, 0x90, 0x5f, 0x2b, 0x40, 0x96, 0x67, 0x20,
	0xb9, 0x6e, 0xff, 0xfb, 0xd8, 0x36, 0x6f, 0xac, 0x32, 0x45, 0xad, 0x13, 0x9c, 0x4e, 0x5f, 0x3b,
	0x2c, 0x1b, 0xa5, 0x89, 0x50, 0x43, 0xe8, 0x58, 0x7e, 0x25, 0x50, 0x45, 0xa3, 0xbc, 0x47, 0x3d,
	0x3a, 0xc2, 0x51, 0xb9, 0xa3, 0x4c, 0xca, 0x01, 0x55, 0x03, 0x95, 0xe2, 0x65, 0x15, 0x26, 0x9f,
	0xba, 0x1d, 0xea, 0x25, 0x01, 0x0d, 0x7b, 0x34, 0xcc, 0x6e, 0x0b, 0xb4, 0x84, 0x11, 0xc1, 0xb9,
	0x61, 0xe8, 0x4b, 0x2e, 0xbf, 0x96, 0xf3, 0xe1, 0x9f, 0x33, 0x4f, 0xe7, 0xc3, 0x3f, 0xef, 0xbd,
	0xb5, 0x6c, 0x0c, 0xff, 0x1e, 0x12, 0x74, 0xec, 0x8b, 0x53, 0x55, 0x94, 0x61, 0x7a, 0xbe, 0xcf,
	0x47, 0x49, 0x46, 0x7c, 0x68, 0x94, 0x23, 0x81, 0x98, 0xf6, 0xb9, 0x33, 0xc4, 0xbc, 0x6a, 0xbf,
	0x63, 0x84, 0x7c, 0x84, 0xa7, 0x5e, 0x39, 0x41, 0x5d, 0x68, 0x28, 0xa4, 0x6b, 0xb4, 0x63, 0x07,
	0x6b, 0xf9, 0x8e, 0xf7, 0xcc, 0x07, 0x68, 0xbe, 0xbb, 0x47, 0xd1, 0x2e, 0xcb, 0x49, 0xc5, 0x20,
	0x49, 0x42, 0x48, 0x92, 0xd6, 0x57, 0x7f, 0xfe, 0x50, 0x6c, 0x03, 0xaf, 0xfd, 0x53, 0x15, 0xb6,
	0x66, 0x6b, 0x8a, 0xbc, 0xa9, 0xc0, 0x07, 0x6a, 0x14, 0x4d, 0x16, 0x95, 0xbb, 0x69, 0xaf, 0x32,
	0xba, 0xcc, 0xa6, 0xfd, 0x9c, 0x97, 0xc1, 0xee, 0x62, 0x34, 0x4f, 0x66, 0xcd, 0xb4, 0x97, 0xf2,
	0x58, 0x45, 0x87, 0x11, 0x64, 0xbc, 0xf8, 0xec, 0xc0, 0x64, 0xc7, 0x38, 0x5d, 0x8b, 0x2f, 0x14,
	0x19, 0xa1, 0x12, 0x91, 0xfc, 0x5e, 0x81, 0x4b, 0x67, 0x95, 0x39, 0xb9, 0x6f, 0xaf, 0x3e, 0xdf,
	0xcc, 0x1d, 0xfb, 0x3f, 0x34, 0x8e, 0x75, 0x84, 0x41, 0x1f, 0xe4, 0x5b, 0x75, 0xbc, 0x52, 0xdc,
	0x69, 0xcc, 0x33, 0x9f, 0x4b, 0x52, 0xde, 0x70, 0xea, 0x43, 0x7f, 0x30, 0x29, 0x82, 0xac, 0x5c,
	0x41, 0x75, 0x67, 0x99, 0xb2, 0x52, 0x6e, 0x2d, 0x89, 0x5f, 0x38, 0x49, 0x66, 0xf4, 0x11, 0xbf,
	0xbd, 0x35, 0xd6, 0xf6, 0xab, 0xdf, 0x57, 0x2a, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xf4,
	0x59, 0x1f, 0x77, 0x0b, 0x00, 0x00,
}
